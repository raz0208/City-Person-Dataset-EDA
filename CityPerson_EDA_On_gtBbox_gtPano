{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":9902813,"sourceType":"datasetVersion","datasetId":6083484}],"dockerImageVersionId":30918,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# **CityPerson Dataset EDA (Exploratory Data Analysis)**\nA complete EDA (Exploratory Data Analysis) for CityPerson dataset\n\n## Used Dataset:\n\n\n*   gtFine_trainvaltest\n*   gtFinePanopticParts_trainval","metadata":{}},{"cell_type":"markdown","source":"## Step 1: Extract and read the datasets","metadata":{}},{"cell_type":"code","source":"# Import Required Libraries\nimport os\nimport cv2\nimport json\nimport random\nimport zipfile\nimport numpy as np\nimport pandas as pd\nfrom PIL import Image\nimport matplotlib.pyplot as plt\nfrom collections import Counter\nfrom collections import defaultdict","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-04T14:23:44.626805Z","iopub.execute_input":"2025-03-04T14:23:44.627208Z","iopub.status.idle":"2025-03-04T14:23:45.389627Z","shell.execute_reply.started":"2025-03-04T14:23:44.627180Z","shell.execute_reply":"2025-03-04T14:23:45.388508Z"}},"outputs":[],"execution_count":1},{"cell_type":"code","source":"# Dataset source files path from in Kaggle\n#gtFine_Src = '***'\ngtFinePano_Src = '/kaggle/input/city-persone/gtFinePanopticParts_trainval'\ngtBbox_Src = '/kaggle/input/city-persone/gtBbox_cityPersons_trainval'","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-04T14:23:45.390958Z","iopub.execute_input":"2025-03-04T14:23:45.391521Z","iopub.status.idle":"2025-03-04T14:23:45.395763Z","shell.execute_reply.started":"2025-03-04T14:23:45.391486Z","shell.execute_reply":"2025-03-04T14:23:45.394726Z"}},"outputs":[],"execution_count":2},{"cell_type":"code","source":"# List the source content from both datasets\n#gtFine_Files = os.listdir(gtFine_ExtPath)\ngtFinepano_Files = os.listdir(gtFinePano_Src)\ngtBbox_Files = os.listdir(gtBbox_Src)\n\ngtFinepano_Files, gtBbox_Files #, gtFine_Files","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-04T14:23:45.397372Z","iopub.execute_input":"2025-03-04T14:23:45.397731Z","iopub.status.idle":"2025-03-04T14:23:45.435769Z","shell.execute_reply.started":"2025-03-04T14:23:45.397704Z","shell.execute_reply":"2025-03-04T14:23:45.434737Z"}},"outputs":[{"execution_count":3,"output_type":"execute_result","data":{"text/plain":"(['gtFinePanopticParts', 'README_panopticParts.md', 'license.txt'],\n ['gtBboxCityPersons', 'README_cityPersons', 'license.txt'])"},"metadata":{}}],"execution_count":3},{"cell_type":"code","source":"# Path to core folder\n# Construct the subdirectory paths\n#gtFine_Subdir = os.path.join(gtFine_Src, 'gtFine')\ngtBbox_Subdir = os.path.join(gtBbox_Src, 'gtBboxCityPersons')\ngtFinePano_Subdir = os.path.join(gtFinePano_Src, 'gtFinePanopticParts')\n\n\n# List driectories inside core folders\n#gtFine_Dirs = os.listdir(gtFine_Subdir) if os.path.exists(gtFine_Subdir) else []\ngtBbox_Dirs = os.listdir(gtBbox_Subdir) if os.path.exists(gtBbox_Subdir) else []\ngtFinePano_Dirs = os.listdir(gtFinePano_Subdir) if os.path.exists(gtFinePano_Subdir) else []\n\ngtBbox_Dirs, gtFinePano_Dirs #, gtFine_Dirs","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-04T14:23:45.436959Z","iopub.execute_input":"2025-03-04T14:23:45.437260Z","iopub.status.idle":"2025-03-04T14:23:45.449834Z","shell.execute_reply.started":"2025-03-04T14:23:45.437234Z","shell.execute_reply":"2025-03-04T14:23:45.448809Z"}},"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"(['val', 'train'], ['val', 'train'])"},"metadata":{}}],"execution_count":4},{"cell_type":"code","source":"# Define the subdirectories\nsubdirs = gtBbox_Dirs #[\"train\", \"val\", \"test\"]\n\n# Initialize dictionaries to store samples from each subdirectory\n#gtFine_CityFolders = {}\ngtFinePano_CityFolders = {}\ngtBbox_CityFolders = {}\n\n# Process each subdirectory\nfor subdir in subdirs:\n    #gtFine_CityFolders[subdir] = os.listdir(os.path.join(gtFine_CorePath, subdir)) if subdir in gtFine_Dirs else []\n    gtFinePano_CityFolders[subdir] = os.listdir(os.path.join(gtFinePano_Subdir, subdir)) if subdir in gtFinePano_Dirs else []\n    gtBbox_CityFolders[subdir] = os.listdir(os.path.join(gtBbox_Subdir, subdir)) if subdir in gtBbox_Dirs else []\n\n# Output the first few files for each subdirectory\n#gtFine_CityFolders_Preview = {key: value[:] for key, value in gtFine_CityFolders.items()}\ngtFinePano_CityFolders_Preview = {key: value[:] for key, value in gtFinePano_CityFolders.items()}\ngtBbox_CityFolders_Preview = {key: value[:] for key, value in gtBbox_CityFolders.items()}\n\n#gtFine_CityFolders_Preview,\nprint(gtFinePano_CityFolders_Preview, \"\\n\")\nprint(gtBbox_CityFolders_Preview)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-04T14:23:45.450931Z","iopub.execute_input":"2025-03-04T14:23:45.451333Z","iopub.status.idle":"2025-03-04T14:23:45.476395Z","shell.execute_reply.started":"2025-03-04T14:23:45.451288Z","shell.execute_reply":"2025-03-04T14:23:45.475368Z"}},"outputs":[{"name":"stdout","text":"{'val': ['munster', 'lindau', 'frankfurt'], 'train': ['dusseldorf', 'darmstadt', 'tubingen', 'erfurt', 'bochum', 'krefeld', 'weimar', 'bremen', 'aachen', 'hamburg', 'monchengladbach', 'hanover', 'zurich', 'jena', 'stuttgart', 'strasbourg', 'cologne', 'ulm']} \n\n{'val': ['munster', 'lindau', 'frankfurt'], 'train': ['dusseldorf', 'darmstadt', 'tubingen', 'erfurt', 'bochum', 'krefeld', 'weimar', 'bremen', 'aachen', 'hamburg', 'monchengladbach', 'hanover', 'zurich', 'jena', 'stuttgart', 'strasbourg', 'cologne', 'ulm']}\n","output_type":"stream"}],"execution_count":5},{"cell_type":"markdown","source":"## Dataset Structure:\n\n1. gtBbox_trainvaltest\n* Contains annotation JSON files.\n  * Organized by: Train, and validation folders.\n  * Files Type:\n      * *_gtBboxCityPersons.json: Contains annotations for semantic segmentation, instance\n2. gtFinePanopticParts_trainval:\n    * Contains TIF files.\n    * Organized similarly to gtBbox_trainvaltest.\n    * File type:\n      * *_gtFinePanopticParts.tif: Panoptic segmentation with part-level annotations (e.g., parts of a pedestrian like arms or legs).","metadata":{}},{"cell_type":"code","source":"# Count the distribution of file types in a given directory\ndef count_file_types(directory):\n    if not os.path.exists(directory):\n      print(f\"Error: Directory '{directory}' not found.\")\n      return None\n\n    file_type_counts = Counter()\n    for root, _, files in os.walk(directory):\n        for file in files:\n            ext = os.path.splitext(file)[-1].lower()\n            file_type_counts[ext] += 1\n    return file_type_counts\n\n# # File type distribution for gtFine dataset\n# print(\"File Type Distribution in gtFine Dataset:\")\n# gtFine_file_types = count_file_types(gtFine_CorePath)\n# print(pd.DataFrame(gtFine_file_types.items(), columns=[\"File Type\", \"Count\"]))\n\n# Analyze file type distribution for gtFinePanopticParts dataset\nprint(\"\\nFile Type Distribution in gtFinePanopticParts Dataset:\")\ngtFinePano_file_types = count_file_types(gtFinePano_Subdir)\nprint(pd.DataFrame(gtFinePano_file_types.items(), columns=[\"File Type\", \"Count\"]))\n\n# Analyze file type distribution for gtBboxCityPersons dataset\nprint(\"\\nFile Type Distribution in gtBboxCityPersons Dataset:\")\ngtBbox_file_types = count_file_types(gtBbox_Subdir)\nprint(pd.DataFrame(gtBbox_file_types.items(), columns=[\"File Type\", \"Count\"]))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-04T14:23:45.477507Z","iopub.execute_input":"2025-03-04T14:23:45.477947Z","iopub.status.idle":"2025-03-04T14:23:46.711039Z","shell.execute_reply.started":"2025-03-04T14:23:45.477866Z","shell.execute_reply":"2025-03-04T14:23:46.709959Z"}},"outputs":[{"name":"stdout","text":"\nFile Type Distribution in gtFinePanopticParts Dataset:\n  File Type  Count\n0      .tif   3475\n\nFile Type Distribution in gtBboxCityPersons Dataset:\n  File Type  Count\n0     .json   3475\n","output_type":"stream"}],"execution_count":6},{"cell_type":"markdown","source":"## Files structure\n\nFor example: the file structure in the \"bochum\" city directory confirms the expected dataset formats and relationships:\n1. gtBbox Dataset (bochum):\n    - Files include:\n       - Polygon annotations (e.g., bochum_000000_000313_gtFine_polygons.json).\n\n\n2. gtFinePanopticParts Dataset (bochum):\n    - Files include:\n      - Panoptic segmentation with part-level detail (e.g., bochum_000000_000313_gtFinePanopticParts.tif).\n\n## Observed Relationship:\n- The filenames match across datasets, indicating alignment.\n  - For example: bochum_000000_000313_gtFinePanopticParts.tif aligns with the corresponding files in gtFine for color, instance, label, and polygons.","metadata":{}},{"cell_type":"code","source":"# Validate image and annotation files\n\n# Select 3 cities name randomly from 'train' folder to check files\nselected_cities = random.sample(gtBbox_CityFolders['train'], 3)\n\n# List files for each selected city\n#gtFine_city_files = {}\ngtFinePano_city_files = {}\ngtBbox_city_files = {}\n#gtFine_city_files_sorted = {}\ngtFinePano_city_files_sorted = {}\ngtBbox_city_files_sorted = {}\n\nfor city in selected_cities:\n    #gtFine_city_path = os.path.join(gtFine_subdir, \"train\", city)\n    gtFinePano_city_path = os.path.join(gtFinePano_Subdir, \"train\", city)\n    gtBbox_city_path = os.path.join(gtBbox_Subdir, \"train\", city)\n\n    #gtFine_city_files[city] = sorted(os.listdir(gtFine_city_path) if os.path.exists(gtFine_city_path) else [])\n    gtFinePano_city_files[city] = sorted(os.listdir(gtFinePano_city_path) if os.path.exists(gtFinePano_city_path) else [])\n    gtBbox_city_files[city] = sorted(os.listdir(gtBbox_city_path) if os.path.exists(gtBbox_city_path) else [])\n\n    #gtFine_city_files_sorted[city] = gtFine_city_files[city][:4]\n    gtFinePano_city_files_sorted[city] = gtFinePano_city_files[city][:1]\n    gtBbox_city_files_sorted[city] = gtBbox_city_files[city][:1]\n\n# Preview sample files for each city\n#gtFine_city_files_sorted, \ngtFinePano_city_files_sorted, gtBbox_city_files_sorted","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-04T14:28:12.973207Z","iopub.execute_input":"2025-03-04T14:28:12.973557Z","iopub.status.idle":"2025-03-04T14:28:12.997831Z","shell.execute_reply.started":"2025-03-04T14:28:12.973529Z","shell.execute_reply":"2025-03-04T14:28:12.996768Z"}},"outputs":[{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"({'weimar': ['weimar_000000_000019_gtFinePanopticParts.tif'],\n  'cologne': ['cologne_000000_000019_gtFinePanopticParts.tif'],\n  'ulm': ['ulm_000000_000019_gtFinePanopticParts.tif']},\n {'weimar': ['weimar_000000_000019_gtBboxCityPersons.json'],\n  'cologne': ['cologne_000000_000019_gtBboxCityPersons.json'],\n  'ulm': ['ulm_000000_000019_gtBboxCityPersons.json']})"},"metadata":{}}],"execution_count":12},{"cell_type":"markdown","source":"### Visualize sample images and annotations\n\nThe visualization showcases the following:\n1. Anotatation: Encoded segmentation where each pedestrian instance is uniquely labeled.\n2. Panoptic Segmentation: A TIF file providing part-level segmentation for pedestrians (e.g., distinguishing arms, legs, etc.).\n\nThis confirms the alignment between datasets and their usability for pedestrian detection tasks.","metadata":{}},{"cell_type":"code","source":"# Parse a JSON annotation file function\ndef parse_json_file(json_path):\n    with open(json_path, 'r') as file:\n        data = json.load(file)\n    print(\"Keys in JSON file:\", data.keys())\n    return data\n\n# Create a list of all JSON files from gtFine\ndef get_json_files(directory):\n    json_files = []\n    for root, dirs, files in os.walk(directory):\n        for file in files:\n            if file.endswith('.json'):\n                json_files.append(os.path.join(root, file))\n    return json_files\n\ngtBbox_json_files = get_json_files(gtBbox_Subdir)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-04T14:49:25.155766Z","iopub.execute_input":"2025-03-04T14:49:25.156195Z","iopub.status.idle":"2025-03-04T14:49:25.201631Z","shell.execute_reply.started":"2025-03-04T14:49:25.156164Z","shell.execute_reply":"2025-03-04T14:49:25.200519Z"}},"outputs":[],"execution_count":16},{"cell_type":"code","source":"# Randomly select a JSON file from gtFine\nif not gtBbox_json_files:\n    print(\"No JSON files found in gtFine dataset.\")\nelse:\n    sample_json = random.choice(gtBbox_json_files)\n    print(f\"Randomly Selected JSON file: {sample_json}\")\n    sample_gtBbox_data = parse_json_file(sample_json)\n\n    # Derive the corresponding .tif file path in gtFinePanopticParts\n    json_filename = os.path.basename(sample_json)\n    tif_filename = json_filename.replace('_gtBboxCityPersons.json', '_gtFinePanopticParts.tif')\n    #gtBbox_json_filename = json_filename.replace('_gtFine_polygons.json', '_gtBboxCityPersons.json')\n\n    # gtBbox_jsonFilePath = None\n    # for root, _, files in os.walk(gtBbox_Subdir):\n    #     for file in files:\n    #         if file == gtBbox_json_filename:\n    #             gtBbox_jsonFilePath = os.path.join(root, file)\n    #             sample_gtBbox_data = parse_json_file(gtBbox_jsonFilePath)\n    #             print(f\"Corresponding .json from gtBbox_cityPersons file: {gtBbox_jsonFilePath}\")\n    #             break\n\n    tif_file_path = None\n    for root, _, files in os.walk(gtFinePano_Subdir):\n        for file in files:\n            if file == tif_filename:\n                tif_file_path = os.path.join(root, file)\n                break\n        if tif_file_path:\n            break\n\n    # Visualize the .tif file if it exists\n    if tif_file_path:\n        print(f\"Corresponding TIF file: {tif_file_path}\")\n        tif_image = Image.open(tif_file_path)\n        plt.imshow(tif_image)\n        plt.title(\"Visualizing TIF File\")\n        plt.axis('off')  # Turn off axis for better visualization\n        plt.show()\n    else:\n        print(f\"No corresponding TIF file found for {sample_json}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-04T14:51:32.678707Z","iopub.execute_input":"2025-03-04T14:51:32.679123Z","iopub.status.idle":"2025-03-04T14:51:33.378103Z","shell.execute_reply.started":"2025-03-04T14:51:32.679092Z","shell.execute_reply":"2025-03-04T14:51:33.376987Z"}},"outputs":[{"name":"stdout","text":"Randomly Selected JSON file: /kaggle/input/city-persone/gtBbox_cityPersons_trainval/gtBboxCityPersons/train/aachen/aachen_000157_000019_gtBboxCityPersons.json\nKeys in JSON file: dict_keys(['imgHeight', 'imgWidth', 'objects'])\nCorresponding TIF file: /kaggle/input/city-persone/gtFinePanopticParts_trainval/gtFinePanopticParts/train/aachen/aachen_000157_000019_gtFinePanopticParts.tif\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":19}]}