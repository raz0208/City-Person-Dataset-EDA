{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":9902813,"sourceType":"datasetVersion","datasetId":6083484}],"dockerImageVersionId":30918,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# **CityPerson Dataset EDA (Exploratory Data Analysis)**\nA complete EDA (Exploratory Data Analysis) for CityPerson dataset\n\n## Used Dataset:\n\n\n*   gtFine_trainvaltest\n*   gtFinePanopticParts_trainval","metadata":{}},{"cell_type":"markdown","source":"## Step 1: Extract and read the datasets","metadata":{}},{"cell_type":"code","source":"# Import Required Libraries\nimport os\nimport cv2\nimport json\nimport random\nimport zipfile\nimport numpy as np\nimport pandas as pd\nfrom PIL import Image\nimport matplotlib.pyplot as plt\nfrom collections import Counter\nfrom collections import defaultdict","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-04T14:23:44.626805Z","iopub.execute_input":"2025-03-04T14:23:44.627208Z","iopub.status.idle":"2025-03-04T14:23:45.389627Z","shell.execute_reply.started":"2025-03-04T14:23:44.627180Z","shell.execute_reply":"2025-03-04T14:23:45.388508Z"}},"outputs":[],"execution_count":1},{"cell_type":"code","source":"# Dataset source files path from in Kaggle\n#gtFine_Src = '***'\ngtFinePano_Src = '/kaggle/input/city-persone/gtFinePanopticParts_trainval'\ngtBbox_Src = '/kaggle/input/city-persone/gtBbox_cityPersons_trainval'","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-04T14:23:45.390958Z","iopub.execute_input":"2025-03-04T14:23:45.391521Z","iopub.status.idle":"2025-03-04T14:23:45.395763Z","shell.execute_reply.started":"2025-03-04T14:23:45.391486Z","shell.execute_reply":"2025-03-04T14:23:45.394726Z"}},"outputs":[],"execution_count":2},{"cell_type":"code","source":"# List the source content from both datasets\n#gtFine_Files = os.listdir(gtFine_ExtPath)\ngtFinepano_Files = os.listdir(gtFinePano_Src)\ngtBbox_Files = os.listdir(gtBbox_Src)\n\ngtFinepano_Files, gtBbox_Files #, gtFine_Files","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-04T14:23:45.397372Z","iopub.execute_input":"2025-03-04T14:23:45.397731Z","iopub.status.idle":"2025-03-04T14:23:45.435769Z","shell.execute_reply.started":"2025-03-04T14:23:45.397704Z","shell.execute_reply":"2025-03-04T14:23:45.434737Z"}},"outputs":[{"execution_count":3,"output_type":"execute_result","data":{"text/plain":"(['gtFinePanopticParts', 'README_panopticParts.md', 'license.txt'],\n ['gtBboxCityPersons', 'README_cityPersons', 'license.txt'])"},"metadata":{}}],"execution_count":3},{"cell_type":"code","source":"# Path to core folder\n# Construct the subdirectory paths\n#gtFine_Subdir = os.path.join(gtFine_Src, 'gtFine')\ngtBbox_Subdir = os.path.join(gtBbox_Src, 'gtBboxCityPersons')\ngtFinePano_Subdir = os.path.join(gtFinePano_Src, 'gtFinePanopticParts')\n\n\n# List driectories inside core folders\n#gtFine_Dirs = os.listdir(gtFine_Subdir) if os.path.exists(gtFine_Subdir) else []\ngtBbox_Dirs = os.listdir(gtBbox_Subdir) if os.path.exists(gtBbox_Subdir) else []\ngtFinePano_Dirs = os.listdir(gtFinePano_Subdir) if os.path.exists(gtFinePano_Subdir) else []\n\ngtBbox_Dirs, gtFinePano_Dirs #, gtFine_Dirs","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-04T14:23:45.436959Z","iopub.execute_input":"2025-03-04T14:23:45.437260Z","iopub.status.idle":"2025-03-04T14:23:45.449834Z","shell.execute_reply.started":"2025-03-04T14:23:45.437234Z","shell.execute_reply":"2025-03-04T14:23:45.448809Z"}},"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"(['val', 'train'], ['val', 'train'])"},"metadata":{}}],"execution_count":4},{"cell_type":"code","source":"# Define the subdirectories\nsubdirs = gtBbox_Dirs #[\"train\", \"val\", \"test\"]\n\n# Initialize dictionaries to store samples from each subdirectory\n#gtFine_CityFolders = {}\ngtFinePano_CityFolders = {}\ngtBbox_CityFolders = {}\n\n# Process each subdirectory\nfor subdir in subdirs:\n    #gtFine_CityFolders[subdir] = os.listdir(os.path.join(gtFine_CorePath, subdir)) if subdir in gtFine_Dirs else []\n    gtFinePano_CityFolders[subdir] = os.listdir(os.path.join(gtFinePano_Subdir, subdir)) if subdir in gtFinePano_Dirs else []\n    gtBbox_CityFolders[subdir] = os.listdir(os.path.join(gtBbox_Subdir, subdir)) if subdir in gtBbox_Dirs else []\n\n# Output the first few files for each subdirectory\n#gtFine_CityFolders_Preview = {key: value[:] for key, value in gtFine_CityFolders.items()}\ngtFinePano_CityFolders_Preview = {key: value[:] for key, value in gtFinePano_CityFolders.items()}\ngtBbox_CityFolders_Preview = {key: value[:] for key, value in gtBbox_CityFolders.items()}\n\n#gtFine_CityFolders_Preview,\nprint(gtFinePano_CityFolders_Preview, \"\\n\")\nprint(gtBbox_CityFolders_Preview)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-04T14:23:45.450931Z","iopub.execute_input":"2025-03-04T14:23:45.451333Z","iopub.status.idle":"2025-03-04T14:23:45.476395Z","shell.execute_reply.started":"2025-03-04T14:23:45.451288Z","shell.execute_reply":"2025-03-04T14:23:45.475368Z"}},"outputs":[{"name":"stdout","text":"{'val': ['munster', 'lindau', 'frankfurt'], 'train': ['dusseldorf', 'darmstadt', 'tubingen', 'erfurt', 'bochum', 'krefeld', 'weimar', 'bremen', 'aachen', 'hamburg', 'monchengladbach', 'hanover', 'zurich', 'jena', 'stuttgart', 'strasbourg', 'cologne', 'ulm']} \n\n{'val': ['munster', 'lindau', 'frankfurt'], 'train': ['dusseldorf', 'darmstadt', 'tubingen', 'erfurt', 'bochum', 'krefeld', 'weimar', 'bremen', 'aachen', 'hamburg', 'monchengladbach', 'hanover', 'zurich', 'jena', 'stuttgart', 'strasbourg', 'cologne', 'ulm']}\n","output_type":"stream"}],"execution_count":5},{"cell_type":"markdown","source":"## Dataset Structure:\n\n1. gtBbox_trainvaltest\n* Contains annotation JSON files.\n  * Organized by: Train, and validation folders.\n  * Files Type:\n      * *_gtBboxCityPersons.json: Contains annotations for semantic segmentation, instance\n2. gtFinePanopticParts_trainval:\n    * Contains TIF files.\n    * Organized similarly to gtBbox_trainvaltest.\n    * File type:\n      * *_gtFinePanopticParts.tif: Panoptic segmentation with part-level annotations (e.g., parts of a pedestrian like arms or legs).","metadata":{}},{"cell_type":"code","source":"# Count the distribution of file types in a given directory\ndef count_file_types(directory):\n    if not os.path.exists(directory):\n      print(f\"Error: Directory '{directory}' not found.\")\n      return None\n\n    file_type_counts = Counter()\n    for root, _, files in os.walk(directory):\n        for file in files:\n            ext = os.path.splitext(file)[-1].lower()\n            file_type_counts[ext] += 1\n    return file_type_counts\n\n# # File type distribution for gtFine dataset\n# print(\"File Type Distribution in gtFine Dataset:\")\n# gtFine_file_types = count_file_types(gtFine_CorePath)\n# print(pd.DataFrame(gtFine_file_types.items(), columns=[\"File Type\", \"Count\"]))\n\n# Analyze file type distribution for gtFinePanopticParts dataset\nprint(\"\\nFile Type Distribution in gtFinePanopticParts Dataset:\")\ngtFinePano_file_types = count_file_types(gtFinePano_Subdir)\nprint(pd.DataFrame(gtFinePano_file_types.items(), columns=[\"File Type\", \"Count\"]))\n\n# Analyze file type distribution for gtBboxCityPersons dataset\nprint(\"\\nFile Type Distribution in gtBboxCityPersons Dataset:\")\ngtBbox_file_types = count_file_types(gtBbox_Subdir)\nprint(pd.DataFrame(gtBbox_file_types.items(), columns=[\"File Type\", \"Count\"]))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-04T14:23:45.477507Z","iopub.execute_input":"2025-03-04T14:23:45.477947Z","iopub.status.idle":"2025-03-04T14:23:46.711039Z","shell.execute_reply.started":"2025-03-04T14:23:45.477866Z","shell.execute_reply":"2025-03-04T14:23:46.709959Z"}},"outputs":[{"name":"stdout","text":"\nFile Type Distribution in gtFinePanopticParts Dataset:\n  File Type  Count\n0      .tif   3475\n\nFile Type Distribution in gtBboxCityPersons Dataset:\n  File Type  Count\n0     .json   3475\n","output_type":"stream"}],"execution_count":6},{"cell_type":"code","source":"# Count images in each city folder\ndef count_images_in_cities(base_path):\n    city_counts = {}\n    if os.path.exists(base_path):\n        for city in os.listdir(base_path):\n            city_path = os.path.join(base_path, city)\n            if os.path.isdir(city_path):\n                image_count = len(os.listdir(city_path))\n                city_counts[city] = (image_count, int(image_count / 4))\n    return city_counts\n\n# Count images in 'train' and 'val' splits for both datasets\n#gtFine_train_counts = count_images_in_cities(os.path.join(gtFine_Subdir, \"train\"))\n#gtFine_val_counts = count_images_in_cities(os.path.join(gtFine_Subdir, \"val\"))\n#gtFine_test_counts = count_images_in_cities(os.path.join(gtFine_Subdir, \"test\"))\ngtFinePano_train_counts = count_images_in_cities(os.path.join(gtFinePano_Subdir, \"train\"))\ngtFinePano_val_counts = count_images_in_cities(os.path.join(gtFinePano_Subdir, \"val\"))\ngtBbox_train_counts = count_images_in_cities(os.path.join(gtBbox_Subdir, \"train\"))\ngtBbox_val_counts = count_images_in_cities(os.path.join(gtBbox_Subdir, \"val\"))\n\n# # Create PANDAS dataframe for gtFine_CityPersons dataset\n# print(\"Name of the cities and number of unique IDs per city in gtFine dataset:\")\n# # Save city image counts for gtFine dataset in pandas DataFrame\n# gtFine_city_trainImg_pd = pd.DataFrame([(city, count[0], count[1]) for city, count in gtFine_train_counts.items()], columns=[\"City\", \"FileCounts\", \"ImgPerUniqueID\"])\n# gtFine_city_valImg_pd = pd.DataFrame([(city, count[0], count[1]) for city, count in gtFine_val_counts.items()], columns=[\"City\", \"FileCounts\", \"ImgPerUniqueID\"])\n# gtFine_city_testImg_pd = pd.DataFrame([(city, count[0], count[1]) for city, count in gtFine_test_counts.items()], columns=[\"City\", \"FileCounts\", \"ImgPerUniqueID\"])\n\n# # Print the gtFine DataFrame\n# print(gtFine_city_trainImg_pd)\n# print(gtFine_city_valImg_pd)\n# print(gtFine_city_testImg_pd)\n\n# Creat PANDAS dataframe for GtBbox_CityPersons dataset\nprint(\"\\nName of the cities and number of unique IDs per city in gtBbox_CityPerson dataset:\")\n# Save city image counts for gtBbox dataset in pandas DataFrame\ngtBbox_city_trainImg_pd = pd.DataFrame([(city, count[0]) for city, count in gtBbox_train_counts.items()], columns=[\"City\", \"FileCounts\"])\ngtBbox_city_valImg_pd = pd.DataFrame([(city, count[0]) for city, count in gtBbox_val_counts.items()], columns=[\"City\", \"FileCounts\"])\n\n# Print the gtBbox_CityPersons Dataframe\nprint(gtBbox_city_trainImg_pd)\nprint(gtBbox_city_valImg_pd)\n\n\nprint(\"\\nName of the cities and number of unique IDs per city in gtFinePanopticParts dataset:\")\n# Save city image counts for gtFinePanopticParts dataset in pandas DataFrame\ngtFinePano_city_trainImg_pd = pd.DataFrame([(city, count[0]) for city, count in gtFinePano_train_counts.items()], columns=[\"City\", \"ImageCounts\"])\ngtFinePano_city_valImg_pd = pd.DataFrame([(city, count[0]) for city, count in gtFinePano_val_counts.items()], columns=[\"City\", \"ImageCounts\"])\n\n# Print the gtFinePanopticParts DataFrame\nprint(gtFinePano_city_trainImg_pd)\nprint(gtFinePano_city_valImg_pd)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-04T15:08:34.835645Z","iopub.execute_input":"2025-03-04T15:08:34.836069Z","iopub.status.idle":"2025-03-04T15:08:34.898603Z","shell.execute_reply.started":"2025-03-04T15:08:34.836033Z","shell.execute_reply":"2025-03-04T15:08:34.897549Z"}},"outputs":[{"name":"stdout","text":"\nName of the cities and number of unique IDs per city in gtBbox_CityPerson dataset:\n               City  FileCounts\n0        dusseldorf         221\n1         darmstadt          85\n2          tubingen         144\n3            erfurt         109\n4            bochum          96\n5           krefeld          99\n6            weimar         142\n7            bremen         316\n8            aachen         174\n9           hamburg         248\n10  monchengladbach          94\n11          hanover         196\n12           zurich         122\n13             jena         119\n14        stuttgart         196\n15       strasbourg         365\n16          cologne         154\n17              ulm          95\n        City  FileCounts\n0    munster         174\n1     lindau          59\n2  frankfurt         267\n\nName of the cities and number of unique IDs per city in gtFinePanopticParts dataset:\n               City  ImageCounts\n0        dusseldorf          221\n1         darmstadt           85\n2          tubingen          144\n3            erfurt          109\n4            bochum           96\n5           krefeld           99\n6            weimar          142\n7            bremen          316\n8            aachen          174\n9           hamburg          248\n10  monchengladbach           94\n11          hanover          196\n12           zurich          122\n13             jena          119\n14        stuttgart          196\n15       strasbourg          365\n16          cologne          154\n17              ulm           95\n        City  ImageCounts\n0    munster          174\n1     lindau           59\n2  frankfurt          267\n","output_type":"stream"}],"execution_count":33},{"cell_type":"markdown","source":"## Files structure\n\nFor example: the file structure in the \"bochum\" city directory confirms the expected dataset formats and relationships:\n1. gtBbox Dataset (bochum):\n    - Files include:\n       - Polygon annotations (e.g., bochum_000000_000313_gtFine_polygons.json).\n\n\n2. gtFinePanopticParts Dataset (bochum):\n    - Files include:\n      - Panoptic segmentation with part-level detail (e.g., bochum_000000_000313_gtFinePanopticParts.tif).\n\n## Observed Relationship:\n- The filenames match across datasets, indicating alignment.\n  - For example: bochum_000000_000313_gtFinePanopticParts.tif aligns with the corresponding files in gtFine for color, instance, label, and polygons.","metadata":{}},{"cell_type":"code","source":"# Validate image and annotation files\n\n# Select 3 cities name randomly from 'train' folder to check files\nselected_cities = random.sample(gtBbox_CityFolders['train'], 3)\n\n# List files for each selected city\n#gtFine_city_files = {}\ngtFinePano_city_files = {}\ngtBbox_city_files = {}\n#gtFine_city_files_sorted = {}\ngtFinePano_city_files_sorted = {}\ngtBbox_city_files_sorted = {}\n\nfor city in selected_cities:\n    #gtFine_city_path = os.path.join(gtFine_subdir, \"train\", city)\n    gtFinePano_city_path = os.path.join(gtFinePano_Subdir, \"train\", city)\n    gtBbox_city_path = os.path.join(gtBbox_Subdir, \"train\", city)\n\n    #gtFine_city_files[city] = sorted(os.listdir(gtFine_city_path) if os.path.exists(gtFine_city_path) else [])\n    gtFinePano_city_files[city] = sorted(os.listdir(gtFinePano_city_path) if os.path.exists(gtFinePano_city_path) else [])\n    gtBbox_city_files[city] = sorted(os.listdir(gtBbox_city_path) if os.path.exists(gtBbox_city_path) else [])\n\n    #gtFine_city_files_sorted[city] = gtFine_city_files[city][:4]\n    gtFinePano_city_files_sorted[city] = gtFinePano_city_files[city][:1]\n    gtBbox_city_files_sorted[city] = gtBbox_city_files[city][:1]\n\n# Preview sample files for each city\n#gtFine_city_files_sorted, \ngtFinePano_city_files_sorted, gtBbox_city_files_sorted","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-04T14:28:12.973207Z","iopub.execute_input":"2025-03-04T14:28:12.973557Z","iopub.status.idle":"2025-03-04T14:28:12.997831Z","shell.execute_reply.started":"2025-03-04T14:28:12.973529Z","shell.execute_reply":"2025-03-04T14:28:12.996768Z"}},"outputs":[{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"({'weimar': ['weimar_000000_000019_gtFinePanopticParts.tif'],\n  'cologne': ['cologne_000000_000019_gtFinePanopticParts.tif'],\n  'ulm': ['ulm_000000_000019_gtFinePanopticParts.tif']},\n {'weimar': ['weimar_000000_000019_gtBboxCityPersons.json'],\n  'cologne': ['cologne_000000_000019_gtBboxCityPersons.json'],\n  'ulm': ['ulm_000000_000019_gtBboxCityPersons.json']})"},"metadata":{}}],"execution_count":12},{"cell_type":"code","source":"# Verify that all files (images and annotations) can be opened without errors.\ndef check_corrupted_images(base_path):\n    corrupted_files = []\n    for root, _, files in os.walk(base_path):\n        for file in files:\n            try:\n                file_path = os.path.join(root, file)\n                if file.lower().endswith(('.png', '.tif')):\n                    with Image.open(file_path) as img:\n                        img.verify()  # Check for corrupted images\n            except Exception as e:\n                corrupted_files.append(file_path)\n    return corrupted_files\n\n# Check for corrupted files in gtFine and gtFinePanopticParts\n#corrupted_gtFine = check_corrupted_images(gtFine_CorePath)\ncorrupted_gtFinePanopticParts = check_corrupted_images(gtFinePano_Subdir)\ncorrupted_gtBbox = check_corrupted_images(gtBbox_Subdir)\n\n#print(\"Corrupted files in gtFine dataset:\", corrupted_gtFine)\nprint(\"Corrupted files in gtFinePanopticParts dataset:\", corrupted_gtFinePanopticParts)\nprint(\"Corrupted files in gtBbox_CityPersons dataset:\", corrupted_gtBbox)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-04T15:10:44.114648Z","iopub.execute_input":"2025-03-04T15:10:44.115072Z","iopub.status.idle":"2025-03-04T15:11:05.104580Z","shell.execute_reply.started":"2025-03-04T15:10:44.115035Z","shell.execute_reply":"2025-03-04T15:11:05.103239Z"}},"outputs":[{"name":"stdout","text":"Corrupted files in gtFinePanopticParts dataset: []\nCorrupted files in gtBbox_CityPersons dataset: []\n","output_type":"stream"}],"execution_count":35},{"cell_type":"markdown","source":"### Visualize sample images and annotations\n\nThe visualization showcases the following:\n1. Anotatation: Encoded segmentation where each pedestrian instance is uniquely labeled.\n2. Panoptic Segmentation: A TIF file providing part-level segmentation for pedestrians (e.g., distinguishing arms, legs, etc.).\n\nThis confirms the alignment between datasets and their usability for pedestrian detection tasks.","metadata":{}},{"cell_type":"code","source":"# Parse a JSON annotation file function\ndef parse_json_file(json_path):\n    with open(json_path, 'r') as file:\n        data = json.load(file)\n    print(\"Keys in JSON file:\", data.keys())\n    return data\n\n# Create a list of all JSON files from gtFine\ndef get_json_files(directory):\n    json_files = []\n    for root, dirs, files in os.walk(directory):\n        for file in files:\n            if file.endswith('.json'):\n                json_files.append(os.path.join(root, file))\n    return json_files\n\ngtBbox_json_files = get_json_files(gtBbox_Subdir)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-04T14:49:25.155766Z","iopub.execute_input":"2025-03-04T14:49:25.156195Z","iopub.status.idle":"2025-03-04T14:49:25.201631Z","shell.execute_reply.started":"2025-03-04T14:49:25.156164Z","shell.execute_reply":"2025-03-04T14:49:25.200519Z"}},"outputs":[],"execution_count":16},{"cell_type":"code","source":"# Randomly select a JSON file from gtFine\nif not gtBbox_json_files:\n    print(\"No JSON files found in gtFine dataset.\")\nelse:\n    sample_json = random.choice(gtBbox_json_files)\n    print(f\"Randomly Selected JSON file: {sample_json}\")\n    sample_gtBbox_data = parse_json_file(sample_json)\n\n    # Derive the corresponding .tif file path in gtFinePanopticParts\n    json_filename = os.path.basename(sample_json)\n    tif_filename = json_filename.replace('_gtBboxCityPersons.json', '_gtFinePanopticParts.tif')\n    #gtBbox_json_filename = json_filename.replace('_gtFine_polygons.json', '_gtBboxCityPersons.json')\n\n    # gtBbox_jsonFilePath = None\n    # for root, _, files in os.walk(gtBbox_Subdir):\n    #     for file in files:\n    #         if file == gtBbox_json_filename:\n    #             gtBbox_jsonFilePath = os.path.join(root, file)\n    #             sample_gtBbox_data = parse_json_file(gtBbox_jsonFilePath)\n    #             print(f\"Corresponding .json from gtBbox_cityPersons file: {gtBbox_jsonFilePath}\")\n    #             break\n\n    tif_file_path = None\n    for root, _, files in os.walk(gtFinePano_Subdir):\n        for file in files:\n            if file == tif_filename:\n                tif_file_path = os.path.join(root, file)\n                break\n        if tif_file_path:\n            break\n\n    # Visualize the .tif file if it exists\n    if tif_file_path:\n        print(f\"Corresponding TIF file: {tif_file_path}\")\n        tif_image = Image.open(tif_file_path)\n        plt.imshow(tif_image)\n        plt.title(\"Visualizing TIF File\")\n        plt.axis('off')  # Turn off axis for better visualization\n        plt.show()\n    else:\n        print(f\"No corresponding TIF file found for {sample_json}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-04T15:04:06.322033Z","iopub.execute_input":"2025-03-04T15:04:06.322468Z","iopub.status.idle":"2025-03-04T15:04:06.711907Z","shell.execute_reply.started":"2025-03-04T15:04:06.322433Z","shell.execute_reply":"2025-03-04T15:04:06.710823Z"}},"outputs":[{"name":"stdout","text":"Randomly Selected JSON file: /kaggle/input/city-persone/gtBbox_cityPersons_trainval/gtBboxCityPersons/train/bremen/bremen_000134_000019_gtBboxCityPersons.json\nKeys in JSON file: dict_keys(['imgHeight', 'imgWidth', 'objects'])\nCorresponding TIF file: /kaggle/input/city-persone/gtFinePanopticParts_trainval/gtFinePanopticParts/train/bremen/bremen_000134_000019_gtFinePanopticParts.tif\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":29},{"cell_type":"code","source":"sample_gtBbox_data","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-04T15:04:09.688310Z","iopub.execute_input":"2025-03-04T15:04:09.688677Z","iopub.status.idle":"2025-03-04T15:04:09.695852Z","shell.execute_reply.started":"2025-03-04T15:04:09.688649Z","shell.execute_reply":"2025-03-04T15:04:09.694721Z"}},"outputs":[{"execution_count":30,"output_type":"execute_result","data":{"text/plain":"{'imgHeight': 1024,\n 'imgWidth': 2048,\n 'objects': [{'instanceId': 24000,\n   'bbox': [1433, 391, 26, 63],\n   'bboxVis': [1441, 392, 17, 29],\n   'label': 'pedestrian'},\n  {'instanceId': 24,\n   'bbox': [896, 410, 48, 77],\n   'bboxVis': [0, 0, 0, 0],\n   'label': 'person group'},\n  {'instanceId': 24,\n   'bbox': [946, 427, 19, 60],\n   'bboxVis': [0, 0, 0, 0],\n   'label': 'person group'}]}"},"metadata":{}}],"execution_count":30},{"cell_type":"code","source":"def count_labels_with_details(data):\n    # Dictionary to store label details\n    label_details = defaultdict(list)\n\n    for obj in data[\"objects\"]:\n        label_details[obj[\"label\"]].append(obj)\n\n    # Generate results\n    result = {}\n    for label, objects in label_details.items():\n        unique_instance_ids = set(obj[\"instanceId\"] for obj in objects)\n        result[label] = {\n            \"count\": len(unique_instance_ids),\n            \"details\": objects\n        }\n\n    return result\n\nlabel_summary = count_labels_with_details(sample_gtBbox_data)\n\n# Print or process the results\nfor label, details in label_summary.items():\n    print(f\"Label: {label}\")\n    print(f\"Count: {details['count']}\")\n    print(\"Details:\")\n    for obj in details[\"details\"]:\n        print(obj)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-04T15:04:12.632245Z","iopub.execute_input":"2025-03-04T15:04:12.632594Z","iopub.status.idle":"2025-03-04T15:04:12.641241Z","shell.execute_reply.started":"2025-03-04T15:04:12.632569Z","shell.execute_reply":"2025-03-04T15:04:12.640165Z"}},"outputs":[{"name":"stdout","text":"Label: pedestrian\nCount: 1\nDetails:\n{'instanceId': 24000, 'bbox': [1433, 391, 26, 63], 'bboxVis': [1441, 392, 17, 29], 'label': 'pedestrian'}\nLabel: person group\nCount: 1\nDetails:\n{'instanceId': 24, 'bbox': [896, 410, 48, 77], 'bboxVis': [0, 0, 0, 0], 'label': 'person group'}\n{'instanceId': 24, 'bbox': [946, 427, 19, 60], 'bboxVis': [0, 0, 0, 0], 'label': 'person group'}\n","output_type":"stream"}],"execution_count":31}]}