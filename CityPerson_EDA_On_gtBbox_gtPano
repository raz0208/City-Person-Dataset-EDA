{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":9902813,"sourceType":"datasetVersion","datasetId":6083484}],"dockerImageVersionId":30918,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# **CityPerson Dataset EDA (Exploratory Data Analysis)**\nA complete EDA (Exploratory Data Analysis) for CityPerson dataset\n\n## Used Dataset:\n\n\n*   gtFine_trainvaltest\n*   gtFinePanopticParts_trainval","metadata":{}},{"cell_type":"markdown","source":"## Step 1: Extract and read the datasets","metadata":{}},{"cell_type":"code","source":"# Import Required Libraries\nimport os\nimport cv2\nimport json\nimport random\nimport zipfile\nimport numpy as np\nimport pandas as pd\nfrom PIL import Image\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom collections import Counter\nfrom collections import defaultdict","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-05T09:46:26.572577Z","iopub.execute_input":"2025-03-05T09:46:26.572933Z","iopub.status.idle":"2025-03-05T09:46:27.264202Z","shell.execute_reply.started":"2025-03-05T09:46:26.572902Z","shell.execute_reply":"2025-03-05T09:46:27.263238Z"}},"outputs":[],"execution_count":19},{"cell_type":"code","source":"# Dataset source files path from in Kaggle\n#gtFine_Src = '***'\ngtFinePano_Src = '/kaggle/input/city-persone/gtFinePanopticParts_trainval'\ngtBbox_Src = '/kaggle/input/city-persone/gtBbox_cityPersons_trainval'","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-05T09:33:21.983867Z","iopub.execute_input":"2025-03-05T09:33:21.984157Z","iopub.status.idle":"2025-03-05T09:33:21.987485Z","shell.execute_reply.started":"2025-03-05T09:33:21.984140Z","shell.execute_reply":"2025-03-05T09:33:21.986598Z"}},"outputs":[],"execution_count":2},{"cell_type":"code","source":"# List the source content from both datasets\n#gtFine_Files = os.listdir(gtFine_ExtPath)\ngtFinepano_Files = os.listdir(gtFinePano_Src)\ngtBbox_Files = os.listdir(gtBbox_Src)\n\ngtFinepano_Files, gtBbox_Files #, gtFine_Files","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-05T09:33:21.988670Z","iopub.execute_input":"2025-03-05T09:33:21.988833Z","iopub.status.idle":"2025-03-05T09:33:22.028569Z","shell.execute_reply.started":"2025-03-05T09:33:21.988818Z","shell.execute_reply":"2025-03-05T09:33:22.027457Z"}},"outputs":[{"execution_count":3,"output_type":"execute_result","data":{"text/plain":"(['gtFinePanopticParts', 'README_panopticParts.md', 'license.txt'],\n ['gtBboxCityPersons', 'README_cityPersons', 'license.txt'])"},"metadata":{}}],"execution_count":3},{"cell_type":"code","source":"# Path to core folder\n# Construct the subdirectory paths\n#gtFine_Subdir = os.path.join(gtFine_Src, 'gtFine')\ngtBbox_Subdir = os.path.join(gtBbox_Src, 'gtBboxCityPersons')\ngtFinePano_Subdir = os.path.join(gtFinePano_Src, 'gtFinePanopticParts')\n\n\n# List driectories inside core folders\n#gtFine_Dirs = os.listdir(gtFine_Subdir) if os.path.exists(gtFine_Subdir) else []\ngtBbox_Dirs = os.listdir(gtBbox_Subdir) if os.path.exists(gtBbox_Subdir) else []\ngtFinePano_Dirs = os.listdir(gtFinePano_Subdir) if os.path.exists(gtFinePano_Subdir) else []\n\ngtBbox_Dirs, gtFinePano_Dirs #, gtFine_Dirs","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-05T09:33:22.029603Z","iopub.execute_input":"2025-03-05T09:33:22.029806Z","iopub.status.idle":"2025-03-05T09:33:22.041795Z","shell.execute_reply.started":"2025-03-05T09:33:22.029789Z","shell.execute_reply":"2025-03-05T09:33:22.040734Z"}},"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"(['val', 'train'], ['val', 'train'])"},"metadata":{}}],"execution_count":4},{"cell_type":"code","source":"# Define the subdirectories\nsubdirs = gtBbox_Dirs #[\"train\", \"val\", \"test\"]\n\n# Initialize dictionaries to store samples from each subdirectory\n#gtFine_CityFolders = {}\ngtFinePano_CityFolders = {}\ngtBbox_CityFolders = {}\n\n# Process each subdirectory\nfor subdir in subdirs:\n    #gtFine_CityFolders[subdir] = os.listdir(os.path.join(gtFine_CorePath, subdir)) if subdir in gtFine_Dirs else []\n    gtFinePano_CityFolders[subdir] = os.listdir(os.path.join(gtFinePano_Subdir, subdir)) if subdir in gtFinePano_Dirs else []\n    gtBbox_CityFolders[subdir] = os.listdir(os.path.join(gtBbox_Subdir, subdir)) if subdir in gtBbox_Dirs else []\n\n# Output the first few files for each subdirectory\n#gtFine_CityFolders_Preview = {key: value[:] for key, value in gtFine_CityFolders.items()}\ngtFinePano_CityFolders_Preview = {key: value[:] for key, value in gtFinePano_CityFolders.items()}\ngtBbox_CityFolders_Preview = {key: value[:] for key, value in gtBbox_CityFolders.items()}\n\n#gtFine_CityFolders_Preview,\nprint(gtFinePano_CityFolders_Preview, \"\\n\")\nprint(gtBbox_CityFolders_Preview)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-05T09:33:22.042676Z","iopub.execute_input":"2025-03-05T09:33:22.042910Z","iopub.status.idle":"2025-03-05T09:33:22.068613Z","shell.execute_reply.started":"2025-03-05T09:33:22.042891Z","shell.execute_reply":"2025-03-05T09:33:22.067636Z"}},"outputs":[{"name":"stdout","text":"{'val': ['munster', 'lindau', 'frankfurt'], 'train': ['dusseldorf', 'darmstadt', 'tubingen', 'erfurt', 'bochum', 'krefeld', 'weimar', 'bremen', 'aachen', 'hamburg', 'monchengladbach', 'hanover', 'zurich', 'jena', 'stuttgart', 'strasbourg', 'cologne', 'ulm']} \n\n{'val': ['munster', 'lindau', 'frankfurt'], 'train': ['dusseldorf', 'darmstadt', 'tubingen', 'erfurt', 'bochum', 'krefeld', 'weimar', 'bremen', 'aachen', 'hamburg', 'monchengladbach', 'hanover', 'zurich', 'jena', 'stuttgart', 'strasbourg', 'cologne', 'ulm']}\n","output_type":"stream"}],"execution_count":5},{"cell_type":"markdown","source":"## Dataset Structure:\n\n1. gtBbox_trainvaltest\n* Contains annotation JSON files.\n  * Organized by: Train, and validation folders.\n  * Files Type:\n      * *_gtBboxCityPersons.json: Contains annotations for semantic segmentation, instance\n2. gtFinePanopticParts_trainval:\n    * Contains TIF files.\n    * Organized similarly to gtBbox_trainvaltest.\n    * File type:\n      * *_gtFinePanopticParts.tif: Panoptic segmentation with part-level annotations (e.g., parts of a pedestrian like arms or legs).","metadata":{}},{"cell_type":"code","source":"# Count the distribution of file types in a given directory\ndef count_file_types(directory):\n    if not os.path.exists(directory):\n      print(f\"Error: Directory '{directory}' not found.\")\n      return None\n\n    file_type_counts = Counter()\n    for root, _, files in os.walk(directory):\n        for file in files:\n            ext = os.path.splitext(file)[-1].lower()\n            file_type_counts[ext] += 1\n    return file_type_counts\n\n# # File type distribution for gtFine dataset\n# print(\"File Type Distribution in gtFine Dataset:\")\n# gtFine_file_types = count_file_types(gtFine_CorePath)\n# print(pd.DataFrame(gtFine_file_types.items(), columns=[\"File Type\", \"Count\"]))\n\n# Analyze file type distribution for gtFinePanopticParts dataset\nprint(\"\\nFile Type Distribution in gtFinePanopticParts Dataset:\")\ngtFinePano_file_types = count_file_types(gtFinePano_Subdir)\nprint(pd.DataFrame(gtFinePano_file_types.items(), columns=[\"File Type\", \"Count\"]))\n\n# Analyze file type distribution for gtBboxCityPersons dataset\nprint(\"\\nFile Type Distribution in gtBboxCityPersons Dataset:\")\ngtBbox_file_types = count_file_types(gtBbox_Subdir)\nprint(pd.DataFrame(gtBbox_file_types.items(), columns=[\"File Type\", \"Count\"]))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-05T09:33:22.069445Z","iopub.execute_input":"2025-03-05T09:33:22.069715Z","iopub.status.idle":"2025-03-05T09:33:23.426146Z","shell.execute_reply.started":"2025-03-05T09:33:22.069691Z","shell.execute_reply":"2025-03-05T09:33:23.425075Z"}},"outputs":[{"name":"stdout","text":"\nFile Type Distribution in gtFinePanopticParts Dataset:\n  File Type  Count\n0      .tif   3475\n\nFile Type Distribution in gtBboxCityPersons Dataset:\n  File Type  Count\n0     .json   3475\n","output_type":"stream"}],"execution_count":6},{"cell_type":"code","source":"# Count images in each city folder\ndef count_images_in_cities(base_path):\n    city_counts = {}\n    if os.path.exists(base_path):\n        for city in os.listdir(base_path):\n            city_path = os.path.join(base_path, city)\n            if os.path.isdir(city_path):\n                image_count = len(os.listdir(city_path))\n                city_counts[city] = (image_count, int(image_count / 4))\n    return city_counts\n\n# Count images in 'train' and 'val' splits for both datasets\n#gtFine_train_counts = count_images_in_cities(os.path.join(gtFine_Subdir, \"train\"))\n#gtFine_val_counts = count_images_in_cities(os.path.join(gtFine_Subdir, \"val\"))\n#gtFine_test_counts = count_images_in_cities(os.path.join(gtFine_Subdir, \"test\"))\ngtFinePano_train_counts = count_images_in_cities(os.path.join(gtFinePano_Subdir, \"train\"))\ngtFinePano_val_counts = count_images_in_cities(os.path.join(gtFinePano_Subdir, \"val\"))\ngtBbox_train_counts = count_images_in_cities(os.path.join(gtBbox_Subdir, \"train\"))\ngtBbox_val_counts = count_images_in_cities(os.path.join(gtBbox_Subdir, \"val\"))\n\n# # Create PANDAS dataframe for gtFine_CityPersons dataset\n# print(\"Name of the cities and number of unique IDs per city in gtFine dataset:\")\n# # Save city image counts for gtFine dataset in pandas DataFrame\n# gtFine_city_trainImg_pd = pd.DataFrame([(city, count[0], count[1]) for city, count in gtFine_train_counts.items()], columns=[\"City\", \"FileCounts\", \"ImgPerUniqueID\"])\n# gtFine_city_valImg_pd = pd.DataFrame([(city, count[0], count[1]) for city, count in gtFine_val_counts.items()], columns=[\"City\", \"FileCounts\", \"ImgPerUniqueID\"])\n# gtFine_city_testImg_pd = pd.DataFrame([(city, count[0], count[1]) for city, count in gtFine_test_counts.items()], columns=[\"City\", \"FileCounts\", \"ImgPerUniqueID\"])\n\n# # Print the gtFine DataFrame\n# print(gtFine_city_trainImg_pd)\n# print(gtFine_city_valImg_pd)\n# print(gtFine_city_testImg_pd)\n\n# Creat PANDAS dataframe for GtBbox_CityPersons dataset\nprint(\"\\nName of the cities and number of unique IDs per city in gtBbox_CityPerson dataset:\")\n# Save city image counts for gtBbox dataset in pandas DataFrame\ngtBbox_city_trainImg_pd = pd.DataFrame([(city, count[0]) for city, count in gtBbox_train_counts.items()], columns=[\"City\", \"FileCounts\"])\ngtBbox_city_valImg_pd = pd.DataFrame([(city, count[0]) for city, count in gtBbox_val_counts.items()], columns=[\"City\", \"FileCounts\"])\n\n# Print the gtBbox_CityPersons Dataframe\nprint(gtBbox_city_trainImg_pd)\nprint(gtBbox_city_valImg_pd)\n\n\nprint(\"\\nName of the cities and number of unique IDs per city in gtFinePanopticParts dataset:\")\n# Save city image counts for gtFinePanopticParts dataset in pandas DataFrame\ngtFinePano_city_trainImg_pd = pd.DataFrame([(city, count[0]) for city, count in gtFinePano_train_counts.items()], columns=[\"City\", \"ImageCounts\"])\ngtFinePano_city_valImg_pd = pd.DataFrame([(city, count[0]) for city, count in gtFinePano_val_counts.items()], columns=[\"City\", \"ImageCounts\"])\n\n# Print the gtFinePanopticParts DataFrame\nprint(gtFinePano_city_trainImg_pd)\nprint(gtFinePano_city_valImg_pd)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-05T09:33:23.426874Z","iopub.execute_input":"2025-03-05T09:33:23.427114Z","iopub.status.idle":"2025-03-05T09:33:23.481477Z","shell.execute_reply.started":"2025-03-05T09:33:23.427095Z","shell.execute_reply":"2025-03-05T09:33:23.480472Z"}},"outputs":[{"name":"stdout","text":"\nName of the cities and number of unique IDs per city in gtBbox_CityPerson dataset:\n               City  FileCounts\n0        dusseldorf         221\n1         darmstadt          85\n2          tubingen         144\n3            erfurt         109\n4            bochum          96\n5           krefeld          99\n6            weimar         142\n7            bremen         316\n8            aachen         174\n9           hamburg         248\n10  monchengladbach          94\n11          hanover         196\n12           zurich         122\n13             jena         119\n14        stuttgart         196\n15       strasbourg         365\n16          cologne         154\n17              ulm          95\n        City  FileCounts\n0    munster         174\n1     lindau          59\n2  frankfurt         267\n\nName of the cities and number of unique IDs per city in gtFinePanopticParts dataset:\n               City  ImageCounts\n0        dusseldorf          221\n1         darmstadt           85\n2          tubingen          144\n3            erfurt          109\n4            bochum           96\n5           krefeld           99\n6            weimar          142\n7            bremen          316\n8            aachen          174\n9           hamburg          248\n10  monchengladbach           94\n11          hanover          196\n12           zurich          122\n13             jena          119\n14        stuttgart          196\n15       strasbourg          365\n16          cologne          154\n17              ulm           95\n        City  ImageCounts\n0    munster          174\n1     lindau           59\n2  frankfurt          267\n","output_type":"stream"}],"execution_count":7},{"cell_type":"markdown","source":"## Files structure\n\nFor example: the file structure in the \"bochum\" city directory confirms the expected dataset formats and relationships:\n1. gtBbox Dataset (bochum):\n    - Files include:\n       - Polygon annotations (e.g., bochum_000000_000313_gtFine_polygons.json).\n\n\n2. gtFinePanopticParts Dataset (bochum):\n    - Files include:\n      - Panoptic segmentation with part-level detail (e.g., bochum_000000_000313_gtFinePanopticParts.tif).\n\n## Observed Relationship:\n- The filenames match across datasets, indicating alignment.\n  - For example: bochum_000000_000313_gtFinePanopticParts.tif aligns with the corresponding files in gtFine for color, instance, label, and polygons.","metadata":{}},{"cell_type":"code","source":"# Validate image and annotation files\n\n# Select 3 cities name randomly from 'train' folder to check files\nselected_cities = random.sample(gtBbox_CityFolders['train'], 3)\n\n# List files for each selected city\n#gtFine_city_files = {}\ngtFinePano_city_files = {}\ngtBbox_city_files = {}\n#gtFine_city_files_sorted = {}\ngtFinePano_city_files_sorted = {}\ngtBbox_city_files_sorted = {}\n\nfor city in selected_cities:\n    #gtFine_city_path = os.path.join(gtFine_subdir, \"train\", city)\n    gtFinePano_city_path = os.path.join(gtFinePano_Subdir, \"train\", city)\n    gtBbox_city_path = os.path.join(gtBbox_Subdir, \"train\", city)\n\n    #gtFine_city_files[city] = sorted(os.listdir(gtFine_city_path) if os.path.exists(gtFine_city_path) else [])\n    gtFinePano_city_files[city] = sorted(os.listdir(gtFinePano_city_path) if os.path.exists(gtFinePano_city_path) else [])\n    gtBbox_city_files[city] = sorted(os.listdir(gtBbox_city_path) if os.path.exists(gtBbox_city_path) else [])\n\n    #gtFine_city_files_sorted[city] = gtFine_city_files[city][:4]\n    gtFinePano_city_files_sorted[city] = gtFinePano_city_files[city][:1]\n    gtBbox_city_files_sorted[city] = gtBbox_city_files[city][:1]\n\n# Preview sample files for each city\n#gtFine_city_files_sorted, \ngtFinePano_city_files_sorted, gtBbox_city_files_sorted","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-05T09:33:23.483242Z","iopub.execute_input":"2025-03-05T09:33:23.483523Z","iopub.status.idle":"2025-03-05T09:33:23.495466Z","shell.execute_reply.started":"2025-03-05T09:33:23.483503Z","shell.execute_reply":"2025-03-05T09:33:23.494630Z"}},"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"({'weimar': ['weimar_000000_000019_gtFinePanopticParts.tif'],\n  'erfurt': ['erfurt_000000_000019_gtFinePanopticParts.tif'],\n  'darmstadt': ['darmstadt_000000_000019_gtFinePanopticParts.tif']},\n {'weimar': ['weimar_000000_000019_gtBboxCityPersons.json'],\n  'erfurt': ['erfurt_000000_000019_gtBboxCityPersons.json'],\n  'darmstadt': ['darmstadt_000000_000019_gtBboxCityPersons.json']})"},"metadata":{}}],"execution_count":8},{"cell_type":"code","source":"# Verify that all files (images and annotations) can be opened without errors.\ndef check_corrupted_images(base_path):\n    corrupted_files = []\n    for root, _, files in os.walk(base_path):\n        for file in files:\n            try:\n                file_path = os.path.join(root, file)\n                if file.lower().endswith(('.png', '.tif')):\n                    with Image.open(file_path) as img:\n                        img.verify()  # Check for corrupted images\n            except Exception as e:\n                corrupted_files.append(file_path)\n    return corrupted_files\n\n# Check for corrupted files in gtFine and gtFinePanopticParts\n#corrupted_gtFine = check_corrupted_images(gtFine_CorePath)\ncorrupted_gtFinePanopticParts = check_corrupted_images(gtFinePano_Subdir)\ncorrupted_gtBbox = check_corrupted_images(gtBbox_Subdir)\n\n#print(\"Corrupted files in gtFine dataset:\", corrupted_gtFine)\nprint(\"Corrupted files in gtFinePanopticParts dataset:\", corrupted_gtFinePanopticParts)\nprint(\"Corrupted files in gtBbox_CityPersons dataset:\", corrupted_gtBbox)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-05T09:33:23.496376Z","iopub.execute_input":"2025-03-05T09:33:23.496577Z","iopub.status.idle":"2025-03-05T09:33:38.251188Z","shell.execute_reply.started":"2025-03-05T09:33:23.496560Z","shell.execute_reply":"2025-03-05T09:33:38.250246Z"}},"outputs":[{"name":"stdout","text":"Corrupted files in gtFinePanopticParts dataset: []\nCorrupted files in gtBbox_CityPersons dataset: []\n","output_type":"stream"}],"execution_count":9},{"cell_type":"markdown","source":"### Visualize sample images and annotations\n\nThe visualization showcases the following:\n1. Anotatation: Encoded segmentation where each pedestrian instance is uniquely labeled.\n2. Panoptic Segmentation: A TIF file providing part-level segmentation for pedestrians (e.g., distinguishing arms, legs, etc.).\n\nThis confirms the alignment between datasets and their usability for pedestrian detection tasks.","metadata":{}},{"cell_type":"code","source":"# Parse a JSON annotation file function\ndef parse_json_file(json_path):\n    with open(json_path, 'r') as file:\n        data = json.load(file)\n    print(\"Keys in JSON file:\", data.keys())\n    return data\n\n# Create a list of all JSON files from gtFine\ndef get_json_files(directory):\n    json_files = []\n    for root, dirs, files in os.walk(directory):\n        for file in files:\n            if file.endswith('.json'):\n                json_files.append(os.path.join(root, file))\n    return json_files\n\ngtBbox_json_files = get_json_files(gtBbox_Subdir)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-05T09:33:38.252153Z","iopub.execute_input":"2025-03-05T09:33:38.252430Z","iopub.status.idle":"2025-03-05T09:33:38.278697Z","shell.execute_reply.started":"2025-03-05T09:33:38.252410Z","shell.execute_reply":"2025-03-05T09:33:38.277524Z"}},"outputs":[],"execution_count":10},{"cell_type":"code","source":"# Randomly select a JSON file from gtFine\nif not gtBbox_json_files:\n    print(\"No JSON files found in gtFine dataset.\")\nelse:\n    sample_json = random.choice(gtBbox_json_files)\n    print(f\"Randomly Selected JSON file: {sample_json}\")\n    sample_gtBbox_data = parse_json_file(sample_json)\n\n    # Derive the corresponding .tif file path in gtFinePanopticParts\n    json_filename = os.path.basename(sample_json)\n    tif_filename = json_filename.replace('_gtBboxCityPersons.json', '_gtFinePanopticParts.tif')\n    #gtBbox_json_filename = json_filename.replace('_gtFine_polygons.json', '_gtBboxCityPersons.json')\n\n    # gtBbox_jsonFilePath = None\n    # for root, _, files in os.walk(gtBbox_Subdir):\n    #     for file in files:\n    #         if file == gtBbox_json_filename:\n    #             gtBbox_jsonFilePath = os.path.join(root, file)\n    #             sample_gtBbox_data = parse_json_file(gtBbox_jsonFilePath)\n    #             print(f\"Corresponding .json from gtBbox_cityPersons file: {gtBbox_jsonFilePath}\")\n    #             break\n\n    tif_file_path = None\n    for root, _, files in os.walk(gtFinePano_Subdir):\n        for file in files:\n            if file == tif_filename:\n                tif_file_path = os.path.join(root, file)\n                break\n        if tif_file_path:\n            break\n\n    # Visualize the .tif file if it exists\n    if tif_file_path:\n        print(f\"Corresponding TIF file: {tif_file_path}\")\n        tif_image = Image.open(tif_file_path)\n        plt.imshow(tif_image)\n        plt.title(\"Visualizing TIF File\")\n        plt.axis('off')  # Turn off axis for better visualization\n        plt.show()\n    else:\n        print(f\"No corresponding TIF file found for {sample_json}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-05T09:33:38.279542Z","iopub.execute_input":"2025-03-05T09:33:38.279799Z","iopub.status.idle":"2025-03-05T09:33:38.606503Z","shell.execute_reply.started":"2025-03-05T09:33:38.279771Z","shell.execute_reply":"2025-03-05T09:33:38.605495Z"}},"outputs":[{"name":"stdout","text":"Randomly Selected JSON file: /kaggle/input/city-persone/gtBbox_cityPersons_trainval/gtBboxCityPersons/train/hamburg/hamburg_000000_099902_gtBboxCityPersons.json\nKeys in JSON file: dict_keys(['imgHeight', 'imgWidth', 'objects'])\nCorresponding TIF file: /kaggle/input/city-persone/gtFinePanopticParts_trainval/gtFinePanopticParts/train/hamburg/hamburg_000000_099902_gtFinePanopticParts.tif\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"iVBORw0KGgoAAAANSUhEUgAAAgMAAAEiCAYAAABkw9FZAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/xnp5ZAAAACXBIWXMAAA9hAAAPYQGoP6dpAABs4ElEQVR4nO2dd3gU1frHv7N9s2mEhERaIHQBQUFELBQFBRELAkLgwsUuitg76L16r6JXbNgpoqBg5QJXFBARBBVFQ+8ESAgljWST3Wyb3x/5nXF2dnZ3Zlt2k/fzPDxkZ3dmzpyZOed73vO+7+F4nudBEARBEESTRdPQBSAIgiAIomEhMUAQBEEQTRwSAwRBEATRxCExQBAEQRBNHBIDBEEQBNHEITFAEARBEE0cEgMEQRAE0cQhMUAQBEEQTRwSAwRBEATRxCExQBAAFi5cCI7jUFhYGHflGDRoEAYNGhT2cZo6kapbgmiMkBggGiWjRo1CUlISqqur/f4mPz8fBoMBZWVlMSxZ46WwsBAcxyn6V1hYiB9++AEcx+Hzzz8XjsE6bLl/jz32WMDzT5kyxe++q1evjvblE0RCo2voAhBENMjPz8eKFSvw1Vdf4W9/+5vP97W1tVi+fDmuvvpqNG/eHJMmTcLNN98Mo9HYAKUNzHfffad6n4a4nqysLHz00Ude2/7zn/+gqKgIc+bM8fltIKvFP/7xD7Rv395rW48ePYKWwWg04oMPPvDZ3qtXLwwdOjRu7zFBNDQkBohGyahRo5CSkoIlS5bIioHly5ejpqYG+fn5AACtVgutVhvrYirCYDCo3qchrsdisWDixIle2z799FNUVFT4bA/G8OHD0bdvX9Vl0Ol0Ac8Vr/eYIBoamiYgGiVmsxk33ngj1q1bh9OnT/t8v2TJEqSkpGDUqFEA5OeTf/vtN1x11VXIzMyE2WxG+/btMXXqVOF7Zub+4YcfvI7NzOULFy4Utm3fvh1TpkxBXl4eTCYTcnJyMHXqVEVTFNJ57Xbt2vk1h7OyyF1Pu3btMHLkSGzatAn9+vWDyWRCXl4eFi1a5HPO7du3Y+DAgTCbzWjdujWee+45LFiwIKH9EJT6UdTV1WHWrFno2LEjjEYj2rRpg0ceeQR1dXWxKShBNABkGSAaLfn5+fjwww+xbNky3HPPPcL28vJyfPvttxg/fjzMZrPsvqdPn8awYcOQlZWFxx57DOnp6SgsLMSXX34ZUlnWrFmDw4cP4+9//ztycnKwa9cuvPfee9i1axd+/vlncByn+FivvvoqrFar17Y5c+bgzz//RPPmzQPue/DgQdx000245ZZbMHnyZMyfPx9TpkxBnz590L17dwBAcXExBg8eDI7j8Pjjj8NiseCDDz6IqXn97NmzKC0t9dqWmZmpaF/pfnq9HmlpaYr29Xg8GDVqFDZt2oTbb78d3bp1w44dOzBnzhzs378fX3/9taLjEESiQWKAaLQMGTIE55xzDpYsWeIlBj777DM4nU5hikCOzZs3o6KiAt99952Xufq5554LqSx33303HnzwQa9t/fv3x/jx47Fp0yZcdtllio91/fXXe33+7LPPsG3bNvzjH/9Az549A+67b98+/Pjjj8L5xo4dizZt2mDBggV4+eWXAQAvvvgiKioqsG3bNvTu3RsA8Pe//x2dOnVSXMZwufLKK3228TwfdL+amhpkZWV5bRs4cKCP9cYfS5Yswdq1a7FhwwZceumlwvYePXrgzjvvxObNmzFgwABFxyKIRILEANFo0Wq1uPnmmzFnzhwUFhaiXbt2AOob/OzsbFxxxRV+901PTwcArFy5Er169YJerw+rLGILhN1uh9VqRf/+/QEA27ZtUyUGxOzevRtTp07Fddddh6eeeiro788991yvc2VlZaFLly44fPiwsG316tW4+OKLBSEAABkZGcjPz8cbb7wRUjnVMnfuXHTu3Fn1fiaTCStWrPDa1qxZM8X7f/bZZ+jWrRu6du3qZWEYMmQIAGD9+vUkBohGCYkBolGTn5+POXPmYMmSJXjiiSdQVFSEjRs3Yvr06QGdyQYOHIjRo0fj2WefxZw5czBo0CBcf/31mDBhQkjm8vLycjz77LP49NNPfXwYzp49q/p4AFBVVYUbb7wRrVq1wqJFixRNNbRt29ZnW7NmzVBRUSF8Pnr0KC6++GKf33Xs2DGkcoZCv379QnIg1Gq1slYFpRw4cAB79uzxsS4w5PxPCKIxQGKAaNT06dMHXbt2xSeffIInnngCn3zyCXieDzhFAECIf//555+xYsUKfPvtt5g6dSr+85//4Oeff0ZycrLfztftdvtsGzt2LDZv3oyHH34YvXv3RnJyMjweD66++mp4PJ6Qrm3KlCk4ceIEfv31V6Smpirax58AUmKCbwp4PB707NkTr7zyiuz3bdq0iXGJCCI2kBggGj35+fl4+umnsX37dixZsgSdOnXChRdeqGjf/v37o3///nj++eexZMkS5Ofn49NPP8Wtt94qmJ8rKyu99jl69KjX54qKCqxbtw7PPvssZs6cKWw/cOBAyNf0wgsv4Ouvv8aXX36Jrl27hnwcOXJzc3Hw4EGf7XLbGhsdOnRAQUEBrrjiClVOnQSR6FBoIdHoYVaAmTNn4s8//wxqFQDqO3DpaJnNobMQs9zcXGi1Wvz4449ev3vrrbe8PrPRuPR4r776quJrELN27Vo89dRTePLJJ32cCSPBVVddhS1btuDPP/8UtpWXl2Px4sURP1e8MXbsWBQXF+P999/3+c5ms6GmpqYBSkUQ0YcsA0Sjp3379hgwYACWL18OAIrEwIcffoi33noLN9xwAzp06IDq6mq8//77SE1NxYgRIwAAaWlpGDNmDN544w1wHIcOHTpg5cqVPvPKqampuPzyyzF79mw4nU60atUK3333HY4cORLS9YwfPx5ZWVno1KkTPv74Y6/vhg4diuzs7JCOy3jkkUfw8ccfY+jQobj33nuF0MK2bduivLy8UY+YJ02ahGXLluHOO+/E+vXrcckll8DtdmPv3r1YtmwZvv3225B8GQgi3iExQDQJ8vPzsXnzZvTr10+RI9zAgQPx66+/4tNPP8WpU6eQlpaGfv36YfHixV5pct944w04nU688847MBqNGDt2LF566SWf1LlLlizBvffei7lz54LneQwbNgzffPMNWrZsqfpamJf75MmTfb5bv3592GKgTZs2WL9+PaZPn45//etfyMrKwrRp02CxWDB9+nSYTKawjh/PaDQafP3115gzZw4WLVqEr776CklJScjLy8N9990XUoQDQSQCHE+eQwRBKGDGjBl49913YbVaKa0vQTQyyGeAIAgfbDab1+eysjJ89NFHuPTSS0kIEEQjhKYJCILw4eKLL8agQYPQrVs3nDp1CvPmzUNVVRWefvrphi4aQRBRgMQAQRA+jBgxAp9//jnee+89cByHCy64APPmzcPll1/e0EUjCCIKkM8AQRAEQTRxyGeAIAiCIJo4JAYIgiAIoolDYoAgCIIgmjiKHQh1Op1XOlWTyQSd7q/d2XfkgkDEMx6PJ6RnNNT9eJ4PeSEiepcIgogEcounSQk5mkCv1/tdylUs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\n"},"metadata":{}}],"execution_count":11},{"cell_type":"code","source":"sample_gtBbox_data","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-05T09:33:38.607282Z","iopub.execute_input":"2025-03-05T09:33:38.607497Z","iopub.status.idle":"2025-03-05T09:33:38.627365Z","shell.execute_reply.started":"2025-03-05T09:33:38.607479Z","shell.execute_reply":"2025-03-05T09:33:38.626546Z"}},"outputs":[{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"{'imgHeight': 1024,\n 'imgWidth': 2048,\n 'objects': [{'instanceId': 24000,\n   'bbox': [1966, 354, 10, 26],\n   'bboxVis': [1968, 354, 8, 26],\n   'label': 'pedestrian'},\n  {'instanceId': 24001,\n   'bbox': [1974, 354, 11, 28],\n   'bboxVis': [1977, 354, 8, 28],\n   'label': 'pedestrian'},\n  {'instanceId': 24002,\n   'bbox': [1358, 362, 12, 28],\n   'bboxVis': [1361, 362, 7, 28],\n   'label': 'pedestrian'},\n  {'instanceId': 24003,\n   'bbox': [1337, 360, 19, 46],\n   'bboxVis': [1342, 360, 11, 46],\n   'label': 'pedestrian'},\n  {'instanceId': 24004,\n   'bbox': [1324, 372, 8, 20],\n   'bboxVis': [1325, 375, 7, 17],\n   'label': 'pedestrian'},\n  {'instanceId': 24005,\n   'bbox': [1328, 360, 20, 47],\n   'bboxVis': [1330, 360, 16, 47],\n   'label': 'pedestrian'},\n  {'instanceId': 24007,\n   'bbox': [1274, 358, 22, 53],\n   'bboxVis': [1282, 358, 13, 53],\n   'label': 'pedestrian'},\n  {'instanceId': 24008,\n   'bbox': [1257, 364, 19, 44],\n   'bboxVis': [1266, 364, 5, 38],\n   'label': 'pedestrian'},\n  {'instanceId': 24009,\n   'bbox': [1272, 364, 20, 48],\n   'bboxVis': [1279, 364, 11, 48],\n   'label': 'pedestrian'},\n  {'instanceId': 24010,\n   'bbox': [1263, 359, 22, 54],\n   'bboxVis': [1269, 359, 15, 54],\n   'label': 'pedestrian'},\n  {'instanceId': 24011,\n   'bbox': [1174, 349, 10, 25],\n   'bboxVis': [1176, 349, 7, 18],\n   'label': 'pedestrian'},\n  {'instanceId': 24012,\n   'bbox': [1163, 343, 13, 30],\n   'bboxVis': [1167, 343, 9, 26],\n   'label': 'pedestrian'},\n  {'instanceId': 24013,\n   'bbox': [1155, 343, 11, 26],\n   'bboxVis': [1156, 343, 10, 26],\n   'label': 'pedestrian'},\n  {'instanceId': 24014,\n   'bbox': [1143, 340, 14, 34],\n   'bboxVis': [1144, 340, 13, 34],\n   'label': 'pedestrian'},\n  {'instanceId': 24015,\n   'bbox': [1155, 357, 15, 37],\n   'bboxVis': [1158, 357, 12, 37],\n   'label': 'pedestrian'},\n  {'instanceId': 24016,\n   'bbox': [1163, 368, 21, 50],\n   'bboxVis': [1163, 394, 13, 24],\n   'label': 'pedestrian'},\n  {'instanceId': 24017,\n   'bbox': [1076, 334, 18, 43],\n   'bboxVis': [1076, 343, 17, 34],\n   'label': 'pedestrian'},\n  {'instanceId': 24018,\n   'bbox': [1089, 337, 17, 41],\n   'bboxVis': [1091, 341, 9, 36],\n   'label': 'pedestrian'},\n  {'instanceId': 24019,\n   'bbox': [1004, 339, 14, 34],\n   'bboxVis': [1006, 340, 11, 33],\n   'label': 'pedestrian'},\n  {'instanceId': 24020,\n   'bbox': [1025, 337, 15, 37],\n   'bboxVis': [1027, 339, 8, 32],\n   'label': 'pedestrian'},\n  {'instanceId': 24021,\n   'bbox': [1040, 341, 15, 34],\n   'bboxVis': [1043, 342, 9, 33],\n   'label': 'pedestrian'},\n  {'instanceId': 24022,\n   'bbox': [1045, 335, 16, 39],\n   'bboxVis': [1050, 336, 11, 38],\n   'label': 'pedestrian'},\n  {'instanceId': 24023,\n   'bbox': [1052, 333, 18, 44],\n   'bboxVis': [1057, 336, 9, 41],\n   'label': 'pedestrian'},\n  {'instanceId': 24024,\n   'bbox': [1029, 340, 17, 40],\n   'bboxVis': [1033, 344, 13, 36],\n   'label': 'pedestrian'},\n  {'instanceId': 24025,\n   'bbox': [1012, 337, 16, 39],\n   'bboxVis': [1015, 338, 13, 30],\n   'label': 'pedestrian'},\n  {'instanceId': 24026,\n   'bbox': [923, 336, 16, 39],\n   'bboxVis': [931, 336, 8, 39],\n   'label': 'pedestrian'},\n  {'instanceId': 24027,\n   'bbox': [935, 329, 19, 47],\n   'bboxVis': [935, 330, 19, 46],\n   'label': 'pedestrian'},\n  {'instanceId': 24028,\n   'bbox': [950, 335, 16, 40],\n   'bboxVis': [951, 335, 14, 40],\n   'label': 'pedestrian'},\n  {'instanceId': 24029,\n   'bbox': [960, 330, 19, 47],\n   'bboxVis': [962, 330, 17, 47],\n   'label': 'pedestrian'},\n  {'instanceId': 24030,\n   'bbox': [977, 340, 15, 36],\n   'bboxVis': [977, 340, 15, 36],\n   'label': 'pedestrian'},\n  {'instanceId': 24031,\n   'bbox': [806, 329, 20, 50],\n   'bboxVis': [808, 330, 10, 49],\n   'label': 'pedestrian'},\n  {'instanceId': 24032,\n   'bbox': [792, 332, 19, 49],\n   'bboxVis': [805, 333, 6, 48],\n   'label': 'pedestrian'},\n  {'instanceId': 24033,\n   'bbox': [833, 333, 21, 50],\n   'bboxVis': [839, 333, 10, 36],\n   'label': 'pedestrian'},\n  {'instanceId': 24034,\n   'bbox': [825, 326, 20, 49],\n   'bboxVis': [828, 326, 13, 39],\n   'label': 'pedestrian'},\n  {'instanceId': 24035,\n   'bbox': [811, 333, 21, 51],\n   'bboxVis': [813, 333, 14, 44],\n   'label': 'pedestrian'},\n  {'instanceId': 24036,\n   'bbox': [821, 333, 20, 50],\n   'bboxVis': [821, 333, 20, 39],\n   'label': 'pedestrian'},\n  {'instanceId': 24037,\n   'bbox': [870, 341, 13, 33],\n   'bboxVis': [875, 341, 8, 26],\n   'label': 'pedestrian'},\n  {'instanceId': 24038,\n   'bbox': [860, 337, 18, 42],\n   'bboxVis': [862, 338, 15, 30],\n   'label': 'pedestrian'},\n  {'instanceId': 24039,\n   'bbox': [845, 330, 18, 43],\n   'bboxVis': [845, 330, 18, 40],\n   'label': 'pedestrian'},\n  {'instanceId': 24040,\n   'bbox': [880, 334, 16, 38],\n   'bboxVis': [881, 335, 12, 37],\n   'label': 'pedestrian'},\n  {'instanceId': 24041,\n   'bbox': [907, 326, 14, 12],\n   'bboxVis': [907, 326, 14, 12],\n   'label': 'person (other)'},\n  {'instanceId': 24042,\n   'bbox': [918, 331, 17, 41],\n   'bboxVis': [918, 332, 16, 40],\n   'label': 'pedestrian'},\n  {'instanceId': 24043,\n   'bbox': [887, 336, 15, 36],\n   'bboxVis': [888, 337, 14, 35],\n   'label': 'pedestrian'},\n  {'instanceId': 24044,\n   'bbox': [900, 334, 20, 49],\n   'bboxVis': [901, 334, 18, 49],\n   'label': 'pedestrian'},\n  {'instanceId': 24045,\n   'bbox': [741, 318, 26, 62],\n   'bboxVis': [745, 318, 22, 40],\n   'label': 'pedestrian'},\n  {'instanceId': 24046,\n   'bbox': [714, 339, 16, 39],\n   'bboxVis': [714, 339, 12, 39],\n   'label': 'pedestrian'},\n  {'instanceId': 24047,\n   'bbox': [719, 320, 24, 57],\n   'bboxVis': [723, 321, 20, 56],\n   'label': 'pedestrian'},\n  {'instanceId': 24048,\n   'bbox': [745, 328, 20, 50],\n   'bboxVis': [745, 328, 20, 50],\n   'label': 'pedestrian'},\n  {'instanceId': 24049,\n   'bbox': [944, 367, 21, 51],\n   'bboxVis': [944, 368, 21, 49],\n   'label': 'pedestrian'},\n  {'instanceId': 24050,\n   'bbox': [957, 368, 24, 58],\n   'bboxVis': [961, 369, 20, 57],\n   'label': 'pedestrian'},\n  {'instanceId': 24051,\n   'bbox': [844, 365, 19, 47],\n   'bboxVis': [851, 365, 10, 19],\n   'label': 'pedestrian'},\n  {'instanceId': 24052,\n   'bbox': [856, 366, 20, 47],\n   'bboxVis': [856, 366, 17, 29],\n   'label': 'pedestrian'},\n  {'instanceId': 24053,\n   'bbox': [884, 369, 20, 50],\n   'bboxVis': [889, 369, 15, 15],\n   'label': 'pedestrian'},\n  {'instanceId': 24054,\n   'bbox': [863, 368, 22, 55],\n   'bboxVis': [864, 368, 21, 22],\n   'label': 'pedestrian'},\n  {'instanceId': 24055,\n   'bbox': [911, 367, 22, 54],\n   'bboxVis': [913, 367, 20, 19],\n   'label': 'pedestrian'},\n  {'instanceId': 24056,\n   'bbox': [823, 377, 24, 58],\n   'bboxVis': [827, 377, 17, 58],\n   'label': 'pedestrian'},\n  {'instanceId': 24057,\n   'bbox': [835, 368, 27, 66],\n   'bboxVis': [840, 368, 17, 62],\n   'label': 'pedestrian'},\n  {'instanceId': 24058,\n   'bbox': [690, 334, 17, 41],\n   'bboxVis': [694, 334, 13, 31],\n   'label': 'pedestrian'},\n  {'instanceId': 24059,\n   'bbox': [658, 327, 20, 51],\n   'bboxVis': [662, 328, 12, 50],\n   'label': 'pedestrian'},\n  {'instanceId': 24060,\n   'bbox': [667, 336, 17, 41],\n   'bboxVis': [679, 337, 5, 40],\n   'label': 'pedestrian'},\n  {'instanceId': 24061,\n   'bbox': [680, 337, 26, 40],\n   'bboxVis': [680, 337, 26, 40],\n   'label': 'sitting person'},\n  {'instanceId': 24062,\n   'bbox': [646, 321, 24, 58],\n   'bboxVis': [646, 322, 24, 57],\n   'label': 'pedestrian'},\n  {'instanceId': 24063,\n   'bbox': [590, 320, 23, 57],\n   'bboxVis': [595, 320, 11, 57],\n   'label': 'pedestrian'},\n  {'instanceId': 24064,\n   'bbox': [600, 323, 23, 55],\n   'bboxVis': [612, 323, 9, 55],\n   'label': 'pedestrian'},\n  {'instanceId': 24065,\n   'bbox': [355, 311, 28, 68],\n   'bboxVis': [360, 311, 23, 68],\n   'label': 'pedestrian'},\n  {'instanceId': 24066,\n   'bbox': [411, 333, 20, 48],\n   'bboxVis': [418, 333, 9, 47],\n   'label': 'pedestrian'},\n  {'instanceId': 24067,\n   'bbox': [430, 333, 20, 49],\n   'bboxVis': [434, 333, 16, 49],\n   'label': 'pedestrian'},\n  {'instanceId': 24068,\n   'bbox': [418, 334, 20, 47],\n   'bboxVis': [424, 334, 13, 46],\n   'label': 'pedestrian'},\n  {'instanceId': 24069,\n   'bbox': [495, 335, 18, 46],\n   'bboxVis': [501, 336, 12, 44],\n   'label': 'pedestrian'},\n  {'instanceId': 24070,\n   'bbox': [539, 335, 18, 44],\n   'bboxVis': [542, 335, 15, 44],\n   'label': 'pedestrian'},\n  {'instanceId': 24071,\n   'bbox': [505, 333, 20, 47],\n   'bboxVis': [505, 333, 20, 47],\n   'label': 'pedestrian'},\n  {'instanceId': 24072,\n   'bbox': [520, 323, 24, 59],\n   'bboxVis': [523, 325, 21, 56],\n   'label': 'pedestrian'},\n  {'instanceId': 24073,\n   'bbox': [451, 333, 21, 49],\n   'bboxVis': [453, 333, 16, 47],\n   'label': 'pedestrian'},\n  {'instanceId': 24074,\n   'bbox': [472, 327, 22, 54],\n   'bboxVis': [480, 327, 9, 53],\n   'label': 'pedestrian'},\n  {'instanceId': 24075,\n   'bbox': [464, 328, 23, 56],\n   'bboxVis': [466, 328, 21, 55],\n   'label': 'pedestrian'},\n  {'instanceId': 24076,\n   'bbox': [483, 327, 23, 57],\n   'bboxVis': [486, 328, 20, 53],\n   'label': 'pedestrian'},\n  {'instanceId': 24077,\n   'bbox': [399, 328, 23, 54],\n   'bboxVis': [402, 328, 20, 54],\n   'label': 'pedestrian'},\n  {'instanceId': 24078,\n   'bbox': [388, 330, 19, 48],\n   'bboxVis': [390, 358, 17, 20],\n   'label': 'pedestrian'},\n  {'instanceId': 24079,\n   'bbox': [376, 318, 26, 63],\n   'bboxVis': [376, 318, 26, 63],\n   'label': 'pedestrian'},\n  {'instanceId': 24080,\n   'bbox': [302, 320, 24, 58],\n   'bboxVis': [305, 320, 15, 58],\n   'label': 'pedestrian'},\n  {'instanceId': 24081,\n   'bbox': [282, 310, 27, 66],\n   'bboxVis': [282, 311, 27, 65],\n   'label': 'pedestrian'},\n  {'instanceId': 24082,\n   'bbox': [173, 327, 22, 56],\n   'bboxVis': [173, 327, 22, 53],\n   'label': 'pedestrian'},\n  {'instanceId': 24083,\n   'bbox': [109, 307, 31, 76],\n   'bboxVis': [117, 309, 23, 61],\n   'label': 'pedestrian'},\n  {'instanceId': 24084,\n   'bbox': [143, 340, 23, 56],\n   'bboxVis': [149, 341, 17, 28],\n   'label': 'pedestrian'},\n  {'instanceId': 24085,\n   'bbox': [91, 294, 31, 77],\n   'bboxVis': [92, 298, 18, 72],\n   'label': 'pedestrian'},\n  {'instanceId': 24086,\n   'bbox': [55, 317, 22, 55],\n   'bboxVis': [62, 318, 12, 39],\n   'label': 'pedestrian'},\n  {'instanceId': 24087,\n   'bbox': [67, 300, 28, 69],\n   'bboxVis': [67, 300, 28, 69],\n   'label': 'pedestrian'},\n  {'instanceId': 24088,\n   'bbox': [10, 297, 28, 68],\n   'bboxVis': [10, 298, 25, 67],\n   'label': 'pedestrian'},\n  {'instanceId': 24089,\n   'bbox': [24, 291, 31, 76],\n   'bboxVis': [26, 293, 25, 74],\n   'label': 'pedestrian'},\n  {'instanceId': 24090,\n   'bbox': [34, 296, 30, 72],\n   'bboxVis': [38, 297, 26, 71],\n   'label': 'pedestrian'},\n  {'instanceId': 24091,\n   'bbox': [1164, 364, 25, 61],\n   'bboxVis': [1169, 365, 14, 37],\n   'label': 'pedestrian'},\n  {'instanceId': 24092,\n   'bbox': [1129, 360, 20, 48],\n   'bboxVis': [1131, 360, 18, 38],\n   'label': 'pedestrian'},\n  {'instanceId': 24093,\n   'bbox': [121, 372, 34, 83],\n   'bboxVis': [126, 372, 16, 83],\n   'label': 'pedestrian'},\n  {'instanceId': 24094,\n   'bbox': [128, 361, 40, 98],\n   'bboxVis': [133, 361, 30, 98],\n   'label': 'pedestrian'},\n  {'instanceId': 25000,\n   'bbox': [1615, 362, 12, 29],\n   'bboxVis': [1619, 362, 8, 22],\n   'label': 'rider'},\n  {'instanceId': 25001,\n   'bbox': [1009, 366, 51, 125],\n   'bboxVis': [1009, 366, 51, 125],\n   'label': 'rider'},\n  {'instanceId': 25002,\n   'bbox': [684, 387, 20, 18],\n   'bboxVis': [684, 387, 20, 18],\n   'label': 'sitting person'},\n  {'instanceId': 24006,\n   'bbox': [1289, 356, 12, 28],\n   'bboxVis': [1291, 361, 5, 21],\n   'label': 'pedestrian'},\n  {'instanceId': 0,\n   'bbox': [547, 299, 9, 12],\n   'bboxVis': [547, 299, 9, 12],\n   'label': 'ignore'}]}"},"metadata":{}}],"execution_count":12},{"cell_type":"code","source":"def count_labels_with_details(data):\n    # Dictionary to store label details\n    label_details = defaultdict(list)\n\n    for obj in data[\"objects\"]:\n        label_details[obj[\"label\"]].append(obj)\n\n    # Generate results\n    result = {}\n    for label, objects in label_details.items():\n        unique_instance_ids = set(obj[\"instanceId\"] for obj in objects)\n        result[label] = {\n            \"count\": len(unique_instance_ids),\n            \"details\": objects\n        }\n\n    return result\n\nlabel_summary = count_labels_with_details(sample_gtBbox_data)\n\n# Print or process the results\nfor label, details in label_summary.items():\n    print(f\"Label: {label}\")\n    print(f\"Count: {details['count']}\")\n    print(\"Details:\")\n    for obj in details[\"details\"]:\n        print(obj)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-05T09:33:38.628157Z","iopub.execute_input":"2025-03-05T09:33:38.628392Z","iopub.status.idle":"2025-03-05T09:33:38.653850Z","shell.execute_reply.started":"2025-03-05T09:33:38.628374Z","shell.execute_reply":"2025-03-05T09:33:38.653060Z"}},"outputs":[{"name":"stdout","text":"Label: pedestrian\nCount: 93\nDetails:\n{'instanceId': 24000, 'bbox': [1966, 354, 10, 26], 'bboxVis': [1968, 354, 8, 26], 'label': 'pedestrian'}\n{'instanceId': 24001, 'bbox': [1974, 354, 11, 28], 'bboxVis': [1977, 354, 8, 28], 'label': 'pedestrian'}\n{'instanceId': 24002, 'bbox': [1358, 362, 12, 28], 'bboxVis': [1361, 362, 7, 28], 'label': 'pedestrian'}\n{'instanceId': 24003, 'bbox': [1337, 360, 19, 46], 'bboxVis': [1342, 360, 11, 46], 'label': 'pedestrian'}\n{'instanceId': 24004, 'bbox': [1324, 372, 8, 20], 'bboxVis': [1325, 375, 7, 17], 'label': 'pedestrian'}\n{'instanceId': 24005, 'bbox': [1328, 360, 20, 47], 'bboxVis': [1330, 360, 16, 47], 'label': 'pedestrian'}\n{'instanceId': 24007, 'bbox': [1274, 358, 22, 53], 'bboxVis': [1282, 358, 13, 53], 'label': 'pedestrian'}\n{'instanceId': 24008, 'bbox': [1257, 364, 19, 44], 'bboxVis': [1266, 364, 5, 38], 'label': 'pedestrian'}\n{'instanceId': 24009, 'bbox': [1272, 364, 20, 48], 'bboxVis': [1279, 364, 11, 48], 'label': 'pedestrian'}\n{'instanceId': 24010, 'bbox': [1263, 359, 22, 54], 'bboxVis': [1269, 359, 15, 54], 'label': 'pedestrian'}\n{'instanceId': 24011, 'bbox': [1174, 349, 10, 25], 'bboxVis': [1176, 349, 7, 18], 'label': 'pedestrian'}\n{'instanceId': 24012, 'bbox': [1163, 343, 13, 30], 'bboxVis': [1167, 343, 9, 26], 'label': 'pedestrian'}\n{'instanceId': 24013, 'bbox': [1155, 343, 11, 26], 'bboxVis': [1156, 343, 10, 26], 'label': 'pedestrian'}\n{'instanceId': 24014, 'bbox': [1143, 340, 14, 34], 'bboxVis': [1144, 340, 13, 34], 'label': 'pedestrian'}\n{'instanceId': 24015, 'bbox': [1155, 357, 15, 37], 'bboxVis': [1158, 357, 12, 37], 'label': 'pedestrian'}\n{'instanceId': 24016, 'bbox': [1163, 368, 21, 50], 'bboxVis': [1163, 394, 13, 24], 'label': 'pedestrian'}\n{'instanceId': 24017, 'bbox': [1076, 334, 18, 43], 'bboxVis': [1076, 343, 17, 34], 'label': 'pedestrian'}\n{'instanceId': 24018, 'bbox': [1089, 337, 17, 41], 'bboxVis': [1091, 341, 9, 36], 'label': 'pedestrian'}\n{'instanceId': 24019, 'bbox': [1004, 339, 14, 34], 'bboxVis': [1006, 340, 11, 33], 'label': 'pedestrian'}\n{'instanceId': 24020, 'bbox': [1025, 337, 15, 37], 'bboxVis': [1027, 339, 8, 32], 'label': 'pedestrian'}\n{'instanceId': 24021, 'bbox': [1040, 341, 15, 34], 'bboxVis': [1043, 342, 9, 33], 'label': 'pedestrian'}\n{'instanceId': 24022, 'bbox': [1045, 335, 16, 39], 'bboxVis': [1050, 336, 11, 38], 'label': 'pedestrian'}\n{'instanceId': 24023, 'bbox': [1052, 333, 18, 44], 'bboxVis': [1057, 336, 9, 41], 'label': 'pedestrian'}\n{'instanceId': 24024, 'bbox': [1029, 340, 17, 40], 'bboxVis': [1033, 344, 13, 36], 'label': 'pedestrian'}\n{'instanceId': 24025, 'bbox': [1012, 337, 16, 39], 'bboxVis': [1015, 338, 13, 30], 'label': 'pedestrian'}\n{'instanceId': 24026, 'bbox': [923, 336, 16, 39], 'bboxVis': [931, 336, 8, 39], 'label': 'pedestrian'}\n{'instanceId': 24027, 'bbox': [935, 329, 19, 47], 'bboxVis': [935, 330, 19, 46], 'label': 'pedestrian'}\n{'instanceId': 24028, 'bbox': [950, 335, 16, 40], 'bboxVis': [951, 335, 14, 40], 'label': 'pedestrian'}\n{'instanceId': 24029, 'bbox': [960, 330, 19, 47], 'bboxVis': [962, 330, 17, 47], 'label': 'pedestrian'}\n{'instanceId': 24030, 'bbox': [977, 340, 15, 36], 'bboxVis': [977, 340, 15, 36], 'label': 'pedestrian'}\n{'instanceId': 24031, 'bbox': [806, 329, 20, 50], 'bboxVis': [808, 330, 10, 49], 'label': 'pedestrian'}\n{'instanceId': 24032, 'bbox': [792, 332, 19, 49], 'bboxVis': [805, 333, 6, 48], 'label': 'pedestrian'}\n{'instanceId': 24033, 'bbox': [833, 333, 21, 50], 'bboxVis': [839, 333, 10, 36], 'label': 'pedestrian'}\n{'instanceId': 24034, 'bbox': [825, 326, 20, 49], 'bboxVis': [828, 326, 13, 39], 'label': 'pedestrian'}\n{'instanceId': 24035, 'bbox': [811, 333, 21, 51], 'bboxVis': [813, 333, 14, 44], 'label': 'pedestrian'}\n{'instanceId': 24036, 'bbox': [821, 333, 20, 50], 'bboxVis': [821, 333, 20, 39], 'label': 'pedestrian'}\n{'instanceId': 24037, 'bbox': [870, 341, 13, 33], 'bboxVis': [875, 341, 8, 26], 'label': 'pedestrian'}\n{'instanceId': 24038, 'bbox': [860, 337, 18, 42], 'bboxVis': [862, 338, 15, 30], 'label': 'pedestrian'}\n{'instanceId': 24039, 'bbox': [845, 330, 18, 43], 'bboxVis': [845, 330, 18, 40], 'label': 'pedestrian'}\n{'instanceId': 24040, 'bbox': [880, 334, 16, 38], 'bboxVis': [881, 335, 12, 37], 'label': 'pedestrian'}\n{'instanceId': 24042, 'bbox': [918, 331, 17, 41], 'bboxVis': [918, 332, 16, 40], 'label': 'pedestrian'}\n{'instanceId': 24043, 'bbox': [887, 336, 15, 36], 'bboxVis': [888, 337, 14, 35], 'label': 'pedestrian'}\n{'instanceId': 24044, 'bbox': [900, 334, 20, 49], 'bboxVis': [901, 334, 18, 49], 'label': 'pedestrian'}\n{'instanceId': 24045, 'bbox': [741, 318, 26, 62], 'bboxVis': [745, 318, 22, 40], 'label': 'pedestrian'}\n{'instanceId': 24046, 'bbox': [714, 339, 16, 39], 'bboxVis': [714, 339, 12, 39], 'label': 'pedestrian'}\n{'instanceId': 24047, 'bbox': [719, 320, 24, 57], 'bboxVis': [723, 321, 20, 56], 'label': 'pedestrian'}\n{'instanceId': 24048, 'bbox': [745, 328, 20, 50], 'bboxVis': [745, 328, 20, 50], 'label': 'pedestrian'}\n{'instanceId': 24049, 'bbox': [944, 367, 21, 51], 'bboxVis': [944, 368, 21, 49], 'label': 'pedestrian'}\n{'instanceId': 24050, 'bbox': [957, 368, 24, 58], 'bboxVis': [961, 369, 20, 57], 'label': 'pedestrian'}\n{'instanceId': 24051, 'bbox': [844, 365, 19, 47], 'bboxVis': [851, 365, 10, 19], 'label': 'pedestrian'}\n{'instanceId': 24052, 'bbox': [856, 366, 20, 47], 'bboxVis': [856, 366, 17, 29], 'label': 'pedestrian'}\n{'instanceId': 24053, 'bbox': [884, 369, 20, 50], 'bboxVis': [889, 369, 15, 15], 'label': 'pedestrian'}\n{'instanceId': 24054, 'bbox': [863, 368, 22, 55], 'bboxVis': [864, 368, 21, 22], 'label': 'pedestrian'}\n{'instanceId': 24055, 'bbox': [911, 367, 22, 54], 'bboxVis': [913, 367, 20, 19], 'label': 'pedestrian'}\n{'instanceId': 24056, 'bbox': [823, 377, 24, 58], 'bboxVis': [827, 377, 17, 58], 'label': 'pedestrian'}\n{'instanceId': 24057, 'bbox': [835, 368, 27, 66], 'bboxVis': [840, 368, 17, 62], 'label': 'pedestrian'}\n{'instanceId': 24058, 'bbox': [690, 334, 17, 41], 'bboxVis': [694, 334, 13, 31], 'label': 'pedestrian'}\n{'instanceId': 24059, 'bbox': [658, 327, 20, 51], 'bboxVis': [662, 328, 12, 50], 'label': 'pedestrian'}\n{'instanceId': 24060, 'bbox': [667, 336, 17, 41], 'bboxVis': [679, 337, 5, 40], 'label': 'pedestrian'}\n{'instanceId': 24062, 'bbox': [646, 321, 24, 58], 'bboxVis': [646, 322, 24, 57], 'label': 'pedestrian'}\n{'instanceId': 24063, 'bbox': [590, 320, 23, 57], 'bboxVis': [595, 320, 11, 57], 'label': 'pedestrian'}\n{'instanceId': 24064, 'bbox': [600, 323, 23, 55], 'bboxVis': [612, 323, 9, 55], 'label': 'pedestrian'}\n{'instanceId': 24065, 'bbox': [355, 311, 28, 68], 'bboxVis': [360, 311, 23, 68], 'label': 'pedestrian'}\n{'instanceId': 24066, 'bbox': [411, 333, 20, 48], 'bboxVis': [418, 333, 9, 47], 'label': 'pedestrian'}\n{'instanceId': 24067, 'bbox': [430, 333, 20, 49], 'bboxVis': [434, 333, 16, 49], 'label': 'pedestrian'}\n{'instanceId': 24068, 'bbox': [418, 334, 20, 47], 'bboxVis': [424, 334, 13, 46], 'label': 'pedestrian'}\n{'instanceId': 24069, 'bbox': [495, 335, 18, 46], 'bboxVis': [501, 336, 12, 44], 'label': 'pedestrian'}\n{'instanceId': 24070, 'bbox': [539, 335, 18, 44], 'bboxVis': [542, 335, 15, 44], 'label': 'pedestrian'}\n{'instanceId': 24071, 'bbox': [505, 333, 20, 47], 'bboxVis': [505, 333, 20, 47], 'label': 'pedestrian'}\n{'instanceId': 24072, 'bbox': [520, 323, 24, 59], 'bboxVis': [523, 325, 21, 56], 'label': 'pedestrian'}\n{'instanceId': 24073, 'bbox': [451, 333, 21, 49], 'bboxVis': [453, 333, 16, 47], 'label': 'pedestrian'}\n{'instanceId': 24074, 'bbox': [472, 327, 22, 54], 'bboxVis': [480, 327, 9, 53], 'label': 'pedestrian'}\n{'instanceId': 24075, 'bbox': [464, 328, 23, 56], 'bboxVis': [466, 328, 21, 55], 'label': 'pedestrian'}\n{'instanceId': 24076, 'bbox': [483, 327, 23, 57], 'bboxVis': [486, 328, 20, 53], 'label': 'pedestrian'}\n{'instanceId': 24077, 'bbox': [399, 328, 23, 54], 'bboxVis': [402, 328, 20, 54], 'label': 'pedestrian'}\n{'instanceId': 24078, 'bbox': [388, 330, 19, 48], 'bboxVis': [390, 358, 17, 20], 'label': 'pedestrian'}\n{'instanceId': 24079, 'bbox': [376, 318, 26, 63], 'bboxVis': [376, 318, 26, 63], 'label': 'pedestrian'}\n{'instanceId': 24080, 'bbox': [302, 320, 24, 58], 'bboxVis': [305, 320, 15, 58], 'label': 'pedestrian'}\n{'instanceId': 24081, 'bbox': [282, 310, 27, 66], 'bboxVis': [282, 311, 27, 65], 'label': 'pedestrian'}\n{'instanceId': 24082, 'bbox': [173, 327, 22, 56], 'bboxVis': [173, 327, 22, 53], 'label': 'pedestrian'}\n{'instanceId': 24083, 'bbox': [109, 307, 31, 76], 'bboxVis': [117, 309, 23, 61], 'label': 'pedestrian'}\n{'instanceId': 24084, 'bbox': [143, 340, 23, 56], 'bboxVis': [149, 341, 17, 28], 'label': 'pedestrian'}\n{'instanceId': 24085, 'bbox': [91, 294, 31, 77], 'bboxVis': [92, 298, 18, 72], 'label': 'pedestrian'}\n{'instanceId': 24086, 'bbox': [55, 317, 22, 55], 'bboxVis': [62, 318, 12, 39], 'label': 'pedestrian'}\n{'instanceId': 24087, 'bbox': [67, 300, 28, 69], 'bboxVis': [67, 300, 28, 69], 'label': 'pedestrian'}\n{'instanceId': 24088, 'bbox': [10, 297, 28, 68], 'bboxVis': [10, 298, 25, 67], 'label': 'pedestrian'}\n{'instanceId': 24089, 'bbox': [24, 291, 31, 76], 'bboxVis': [26, 293, 25, 74], 'label': 'pedestrian'}\n{'instanceId': 24090, 'bbox': [34, 296, 30, 72], 'bboxVis': [38, 297, 26, 71], 'label': 'pedestrian'}\n{'instanceId': 24091, 'bbox': [1164, 364, 25, 61], 'bboxVis': [1169, 365, 14, 37], 'label': 'pedestrian'}\n{'instanceId': 24092, 'bbox': [1129, 360, 20, 48], 'bboxVis': [1131, 360, 18, 38], 'label': 'pedestrian'}\n{'instanceId': 24093, 'bbox': [121, 372, 34, 83], 'bboxVis': [126, 372, 16, 83], 'label': 'pedestrian'}\n{'instanceId': 24094, 'bbox': [128, 361, 40, 98], 'bboxVis': [133, 361, 30, 98], 'label': 'pedestrian'}\n{'instanceId': 24006, 'bbox': [1289, 356, 12, 28], 'bboxVis': [1291, 361, 5, 21], 'label': 'pedestrian'}\nLabel: person (other)\nCount: 1\nDetails:\n{'instanceId': 24041, 'bbox': [907, 326, 14, 12], 'bboxVis': [907, 326, 14, 12], 'label': 'person (other)'}\nLabel: sitting person\nCount: 2\nDetails:\n{'instanceId': 24061, 'bbox': [680, 337, 26, 40], 'bboxVis': [680, 337, 26, 40], 'label': 'sitting person'}\n{'instanceId': 25002, 'bbox': [684, 387, 20, 18], 'bboxVis': [684, 387, 20, 18], 'label': 'sitting person'}\nLabel: rider\nCount: 2\nDetails:\n{'instanceId': 25000, 'bbox': [1615, 362, 12, 29], 'bboxVis': [1619, 362, 8, 22], 'label': 'rider'}\n{'instanceId': 25001, 'bbox': [1009, 366, 51, 125], 'bboxVis': [1009, 366, 51, 125], 'label': 'rider'}\nLabel: ignore\nCount: 1\nDetails:\n{'instanceId': 0, 'bbox': [547, 299, 9, 12], 'bboxVis': [547, 299, 9, 12], 'label': 'ignore'}\n","output_type":"stream"}],"execution_count":13},{"cell_type":"code","source":"# Function to calculate file sizes for specific file types\ndef get_file_sizes_for_types(directory, file_types):\n    file_sizes_by_type = {file_type: [] for file_type in file_types}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            file_path = os.path.join(root, file)\n            file_type = os.path.splitext(file)[-1].lower()\n            if file_type in file_sizes_by_type:\n                size = os.path.getsize(file_path) / 1e3  # Convert bytes to KB\n                file_sizes_by_type[file_type].append(size)\n    return file_sizes_by_type\n\n# Define the file types to analyze\n#gtFine_file_types = [\".png\", \".json\"]\ngtFinePano_file_type = [\".tif\"]\ngtBbox_file_types = [\".json\"]\n\n# Analyze file sizes for specific file types in both datasets\n#gtFine_file_sizes_selected = get_file_sizes_for_types(gtFine_CorePath, gtFine_file_types)\ngtFinePanoptic_file_sizes_selected = get_file_sizes_for_types(gtFinePano_Subdir, gtFinePano_file_type)\ngtBbox_file_sizes_selected = get_file_sizes_for_types(gtBbox_Subdir, gtBbox_file_types)\n\n# Function to plot file size distribution for specific file types\ndef plot_file_sizes_for_types(file_sizes_by_type, dataset_name):\n    for file_type, sizes in file_sizes_by_type.items():\n        plt.figure(figsize=(10, 5))\n        sns.histplot(sizes, bins=40, kde=True, alpha=0.8, color='skyblue')\n        ax = plt.gca()\n        ax.lines[0].set_color('blue')  # Change KDE line color to red\n        ax.lines[0].set_linewidth(1)  # Optional: Change line thickness\n        #plt.hist(sizes, bins=40, alpha=0.8, color='red', edgecolor='black', linewidth=1)\n        plt.xlabel(\"File Size (KB)\")\n        plt.ylabel(\"Frequency\")\n        plt.title(f\"File Size Distribution for {file_type} in {dataset_name}\")\n        plt.grid(axis=\"y\", alpha=0.40)\n        plt.show()\n\n# Plot file size distribution for gtFine dataset\n# plot_file_sizes_for_types(gtFine_file_sizes_selected, \"gtFine Dataset\")\n# print(\"\\n\")\n# Plot file size distribution for gtFinePanopticParts dataset\nplot_file_sizes_for_types(gtFinePanoptic_file_sizes_selected, \"gtFinePanopticParts Dataset\")\nprint(\"\\n\")\n# Plot file size distribution for gtBbox_CityPersons dataset\nplot_file_sizes_for_types(gtBbox_file_sizes_selected, \"gtBbox_CityPersons Dataset\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-05T10:20:32.745904Z","iopub.execute_input":"2025-03-05T10:20:32.746186Z","iopub.status.idle":"2025-03-05T10:20:33.254223Z","shell.execute_reply.started":"2025-03-05T10:20:32.746165Z","shell.execute_reply":"2025-03-05T10:20:33.253175Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x500 with 1 Axes>","image/png":"\n"},"metadata":{}},{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n","output_type":"stream"},{"name":"stdout","text":"\n\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x500 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":50}]}